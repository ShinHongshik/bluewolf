
f405test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002448  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080026a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000074  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000e4  200000e4  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   000098c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001cd2  00000000  00000000  00029966  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002df6  00000000  00000000  0002b638  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000648  00000000  00000000  0002e430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002ea78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003476  00000000  00000000  0002f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000028a4  00000000  00000000  0003264e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00034ef2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000016c0  00000000  00000000  00034f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080025c0 	.word	0x080025c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080025c0 	.word	0x080025c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f8aa 	bl	80006f0 <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f85e 	bl	800066c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f82f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f000 ffa0 	bl	8001534 <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000009c 	.word	0x2000009c
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2000009c 	.word	0x2000009c

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800064a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	0200      	lsls	r0, r0, #8
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000662:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	68dc      	ldr	r4, [r3, #12]
 8000672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	2b04      	cmp	r3, #4
 800067e:	bf28      	it	cs
 8000680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 0501 	mov.w	r5, #1
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf8c      	ite	hi
 8000692:	3c03      	subhi	r4, #3
 8000694:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	4019      	ands	r1, r3
 8000698:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	3c01      	subs	r4, #1
 80006a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	ea42 0201 	orr.w	r2, r2, r1
 80006a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfad      	iteet	ge
 80006ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	andlt.w	r0, r0, #15
 80006b6:	4b06      	ldrlt	r3, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfb5      	itete	lt
 80006be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000ed14 	.word	0xe000ed14

080006d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006d4:	2800      	cmp	r0, #0
 80006d6:	db08      	blt.n	80006ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d8:	0942      	lsrs	r2, r0, #5
 80006da:	2301      	movs	r3, #1
 80006dc:	f000 001f 	and.w	r0, r0, #31
 80006e0:	fa03 f000 	lsl.w	r0, r3, r0
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <HAL_NVIC_EnableIRQ+0x18>)
 80006e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	3801      	subs	r0, #1
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d20a      	bcs.n	800070e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	21f0      	movs	r1, #240	; 0xf0
 8000700:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e010 	.word	0xe000e010
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800071c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000720:	2b02      	cmp	r3, #2
 8000722:	d003      	beq.n	800072c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000728:	2001      	movs	r0, #1
 800072a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800072c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800072e:	2305      	movs	r3, #5
 8000730:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800073c:	2000      	movs	r0, #0
}
 800073e:	4770      	bx	lr

08000740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000744:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008f8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800074c:	4a68      	ldr	r2, [pc, #416]	; (80008f0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008fc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000752:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000754:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000756:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800075c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000760:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000764:	45b6      	cmp	lr, r6
 8000766:	f040 80ae 	bne.w	80008c6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076a:	684c      	ldr	r4, [r1, #4]
 800076c:	f024 0710 	bic.w	r7, r4, #16
 8000770:	2f02      	cmp	r7, #2
 8000772:	d116      	bne.n	80007a2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000774:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000778:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800077c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000780:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000784:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000788:	f04f 0c0f 	mov.w	ip, #15
 800078c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000790:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000794:	690d      	ldr	r5, [r1, #16]
 8000796:	fa05 f50b 	lsl.w	r5, r5, fp
 800079a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800079e:	f8ca 5020 	str.w	r5, [sl, #32]
 80007a2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007a8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ac:	fa05 f50a 	lsl.w	r5, r5, sl
 80007b0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ba:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007be:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007c6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ca:	d811      	bhi.n	80007f0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007cc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ce:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d2:	68cf      	ldr	r7, [r1, #12]
 80007d4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007d8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007dc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007de:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007e0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007e4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007e8:	409f      	lsls	r7, r3
 80007ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007f2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007f4:	688f      	ldr	r7, [r1, #8]
 80007f6:	fa07 f70a 	lsl.w	r7, r7, sl
 80007fa:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007fc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007fe:	00e5      	lsls	r5, r4, #3
 8000800:	d561      	bpl.n	80008c6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	f04f 0b00 	mov.w	fp, #0
 8000806:	f8cd b00c 	str.w	fp, [sp, #12]
 800080a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800080e:	4d39      	ldr	r5, [pc, #228]	; (80008f4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000810:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000814:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000818:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800081c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000820:	9703      	str	r7, [sp, #12]
 8000822:	9f03      	ldr	r7, [sp, #12]
 8000824:	f023 0703 	bic.w	r7, r3, #3
 8000828:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800082c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000830:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000834:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000838:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800083c:	f04f 0e0f 	mov.w	lr, #15
 8000840:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000844:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000846:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084a:	d043      	beq.n	80008d4 <HAL_GPIO_Init+0x194>
 800084c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000850:	42a8      	cmp	r0, r5
 8000852:	d041      	beq.n	80008d8 <HAL_GPIO_Init+0x198>
 8000854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000858:	42a8      	cmp	r0, r5
 800085a:	d03f      	beq.n	80008dc <HAL_GPIO_Init+0x19c>
 800085c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000860:	42a8      	cmp	r0, r5
 8000862:	d03d      	beq.n	80008e0 <HAL_GPIO_Init+0x1a0>
 8000864:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000868:	42a8      	cmp	r0, r5
 800086a:	d03b      	beq.n	80008e4 <HAL_GPIO_Init+0x1a4>
 800086c:	4548      	cmp	r0, r9
 800086e:	d03b      	beq.n	80008e8 <HAL_GPIO_Init+0x1a8>
 8000870:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000874:	42a8      	cmp	r0, r5
 8000876:	d039      	beq.n	80008ec <HAL_GPIO_Init+0x1ac>
 8000878:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087c:	42a8      	cmp	r0, r5
 800087e:	bf14      	ite	ne
 8000880:	2508      	movne	r5, #8
 8000882:	2507      	moveq	r5, #7
 8000884:	fa05 f50c 	lsl.w	r5, r5, ip
 8000888:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800088c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800088e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000890:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000892:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000896:	bf0c      	ite	eq
 8000898:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800089a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800089c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800089e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008a0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008a4:	bf0c      	ite	eq
 80008a6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008aa:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008ac:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ae:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008b2:	bf0c      	ite	eq
 80008b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008b8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008ba:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008bc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008be:	bf54      	ite	pl
 80008c0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008c2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008c4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c6:	3301      	adds	r3, #1
 80008c8:	2b10      	cmp	r3, #16
 80008ca:	f47f af44 	bne.w	8000756 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008ce:	b005      	add	sp, #20
 80008d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d4:	465d      	mov	r5, fp
 80008d6:	e7d5      	b.n	8000884 <HAL_GPIO_Init+0x144>
 80008d8:	2501      	movs	r5, #1
 80008da:	e7d3      	b.n	8000884 <HAL_GPIO_Init+0x144>
 80008dc:	2502      	movs	r5, #2
 80008de:	e7d1      	b.n	8000884 <HAL_GPIO_Init+0x144>
 80008e0:	2503      	movs	r5, #3
 80008e2:	e7cf      	b.n	8000884 <HAL_GPIO_Init+0x144>
 80008e4:	2504      	movs	r5, #4
 80008e6:	e7cd      	b.n	8000884 <HAL_GPIO_Init+0x144>
 80008e8:	2505      	movs	r5, #5
 80008ea:	e7cb      	b.n	8000884 <HAL_GPIO_Init+0x144>
 80008ec:	2506      	movs	r5, #6
 80008ee:	e7c9      	b.n	8000884 <HAL_GPIO_Init+0x144>
 80008f0:	40013c00 	.word	0x40013c00
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021400 	.word	0x40021400

08000900 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000900:	b10a      	cbz	r2, 8000906 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000902:	6181      	str	r1, [r0, #24]
 8000904:	4770      	bx	lr
 8000906:	0409      	lsls	r1, r1, #16
 8000908:	e7fb      	b.n	8000902 <HAL_GPIO_WritePin+0x2>
	...

0800090c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800090c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000910:	4604      	mov	r4, r0
 8000912:	b918      	cbnz	r0, 800091c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000914:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000916:	b002      	add	sp, #8
 8000918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800091c:	6803      	ldr	r3, [r0, #0]
 800091e:	07dd      	lsls	r5, r3, #31
 8000920:	d410      	bmi.n	8000944 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	0798      	lsls	r0, r3, #30
 8000926:	d458      	bmi.n	80009da <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	071a      	lsls	r2, r3, #28
 800092c:	f100 809a 	bmi.w	8000a64 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	075b      	lsls	r3, r3, #29
 8000934:	f100 80b8 	bmi.w	8000aa8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000938:	69a2      	ldr	r2, [r4, #24]
 800093a:	2a00      	cmp	r2, #0
 800093c:	f040 8119 	bne.w	8000b72 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000940:	2000      	movs	r0, #0
 8000942:	e7e8      	b.n	8000916 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000944:	4ba6      	ldr	r3, [pc, #664]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	f002 020c 	and.w	r2, r2, #12
 800094c:	2a04      	cmp	r2, #4
 800094e:	d007      	beq.n	8000960 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000956:	2a08      	cmp	r2, #8
 8000958:	d10a      	bne.n	8000970 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	0259      	lsls	r1, r3, #9
 800095e:	d507      	bpl.n	8000970 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000960:	4b9f      	ldr	r3, [pc, #636]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	039a      	lsls	r2, r3, #14
 8000966:	d5dc      	bpl.n	8000922 <HAL_RCC_OscConfig+0x16>
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1d9      	bne.n	8000922 <HAL_RCC_OscConfig+0x16>
 800096e:	e7d1      	b.n	8000914 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	4d9b      	ldr	r5, [pc, #620]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000978:	d111      	bne.n	800099e <HAL_RCC_OscConfig+0x92>
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000980:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000982:	f7ff fe47 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000986:	4d96      	ldr	r5, [pc, #600]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000988:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	682b      	ldr	r3, [r5, #0]
 800098c:	039b      	lsls	r3, r3, #14
 800098e:	d4c8      	bmi.n	8000922 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000990:	f7ff fe40 	bl	8000614 <HAL_GetTick>
 8000994:	1b80      	subs	r0, r0, r6
 8000996:	2864      	cmp	r0, #100	; 0x64
 8000998:	d9f7      	bls.n	800098a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800099a:	2003      	movs	r0, #3
 800099c:	e7bb      	b.n	8000916 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800099e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a2:	d104      	bne.n	80009ae <HAL_RCC_OscConfig+0xa2>
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	e7e5      	b.n	800097a <HAL_RCC_OscConfig+0x6e>
 80009ae:	682a      	ldr	r2, [r5, #0]
 80009b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009b4:	602a      	str	r2, [r5, #0]
 80009b6:	682a      	ldr	r2, [r5, #0]
 80009b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009bc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1df      	bne.n	8000982 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009c2:	f7ff fe27 	bl	8000614 <HAL_GetTick>
 80009c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	039f      	lsls	r7, r3, #14
 80009cc:	d5a9      	bpl.n	8000922 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ce:	f7ff fe21 	bl	8000614 <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2864      	cmp	r0, #100	; 0x64
 80009d6:	d9f7      	bls.n	80009c8 <HAL_RCC_OscConfig+0xbc>
 80009d8:	e7df      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009da:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	f012 0f0c 	tst.w	r2, #12
 80009e2:	d007      	beq.n	80009f4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ea:	2a08      	cmp	r2, #8
 80009ec:	d111      	bne.n	8000a12 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	025e      	lsls	r6, r3, #9
 80009f2:	d40e      	bmi.n	8000a12 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f4:	4b7a      	ldr	r3, [pc, #488]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	0795      	lsls	r5, r2, #30
 80009fa:	d502      	bpl.n	8000a02 <HAL_RCC_OscConfig+0xf6>
 80009fc:	68e2      	ldr	r2, [r4, #12]
 80009fe:	2a01      	cmp	r2, #1
 8000a00:	d188      	bne.n	8000914 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	6921      	ldr	r1, [r4, #16]
 8000a06:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a0a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a0e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a10:	e78a      	b.n	8000928 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a12:	68e2      	ldr	r2, [r4, #12]
 8000a14:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <HAL_RCC_OscConfig+0x2d8>)
 8000a16:	b1b2      	cbz	r2, 8000a46 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fdfa 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a20:	4d6f      	ldr	r5, [pc, #444]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	0798      	lsls	r0, r3, #30
 8000a28:	d507      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	6922      	ldr	r2, [r4, #16]
 8000a2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a36:	602b      	str	r3, [r5, #0]
 8000a38:	e776      	b.n	8000928 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3a:	f7ff fdeb 	bl	8000614 <HAL_GetTick>
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d9ef      	bls.n	8000a24 <HAL_RCC_OscConfig+0x118>
 8000a44:	e7a9      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a48:	f7ff fde4 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a4c:	4d64      	ldr	r5, [pc, #400]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	0799      	lsls	r1, r3, #30
 8000a54:	f57f af68 	bpl.w	8000928 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a58:	f7ff fddc 	bl	8000614 <HAL_GetTick>
 8000a5c:	1b80      	subs	r0, r0, r6
 8000a5e:	2802      	cmp	r0, #2
 8000a60:	d9f6      	bls.n	8000a50 <HAL_RCC_OscConfig+0x144>
 8000a62:	e79a      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a64:	6962      	ldr	r2, [r4, #20]
 8000a66:	4b60      	ldr	r3, [pc, #384]	; (8000be8 <HAL_RCC_OscConfig+0x2dc>)
 8000a68:	b17a      	cbz	r2, 8000a8a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fdd1 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a72:	4d5b      	ldr	r5, [pc, #364]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a78:	079f      	lsls	r7, r3, #30
 8000a7a:	f53f af59 	bmi.w	8000930 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7e:	f7ff fdc9 	bl	8000614 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	2802      	cmp	r0, #2
 8000a86:	d9f6      	bls.n	8000a76 <HAL_RCC_OscConfig+0x16a>
 8000a88:	e787      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a8a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a8c:	f7ff fdc2 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	4d53      	ldr	r5, [pc, #332]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a96:	0798      	lsls	r0, r3, #30
 8000a98:	f57f af4a 	bpl.w	8000930 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9c:	f7ff fdba 	bl	8000614 <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	2802      	cmp	r0, #2
 8000aa4:	d9f6      	bls.n	8000a94 <HAL_RCC_OscConfig+0x188>
 8000aa6:	e778      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aac:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ab0:	d128      	bne.n	8000b04 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	9201      	str	r2, [sp, #4]
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ac6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac8:	4d48      	ldr	r5, [pc, #288]	; (8000bec <HAL_RCC_OscConfig+0x2e0>)
 8000aca:	682b      	ldr	r3, [r5, #0]
 8000acc:	05d9      	lsls	r1, r3, #23
 8000ace:	d51b      	bpl.n	8000b08 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad0:	68a3      	ldr	r3, [r4, #8]
 8000ad2:	4d43      	ldr	r5, [pc, #268]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d127      	bne.n	8000b28 <HAL_RCC_OscConfig+0x21c>
 8000ad8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ae0:	f7ff fd98 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae4:	4d3e      	ldr	r5, [pc, #248]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ae6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aee:	079b      	lsls	r3, r3, #30
 8000af0:	d539      	bpl.n	8000b66 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	f43f af20 	beq.w	8000938 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af8:	4a39      	ldr	r2, [pc, #228]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000afa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	e719      	b.n	8000938 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000b04:	2600      	movs	r6, #0
 8000b06:	e7df      	b.n	8000ac8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b10:	f7ff fd80 	bl	8000614 <HAL_GetTick>
 8000b14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	05da      	lsls	r2, r3, #23
 8000b1a:	d4d9      	bmi.n	8000ad0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b1c:	f7ff fd7a 	bl	8000614 <HAL_GetTick>
 8000b20:	1bc0      	subs	r0, r0, r7
 8000b22:	2802      	cmp	r0, #2
 8000b24:	d9f7      	bls.n	8000b16 <HAL_RCC_OscConfig+0x20a>
 8000b26:	e738      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	d104      	bne.n	8000b36 <HAL_RCC_OscConfig+0x22a>
 8000b2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	672b      	str	r3, [r5, #112]	; 0x70
 8000b34:	e7d0      	b.n	8000ad8 <HAL_RCC_OscConfig+0x1cc>
 8000b36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b38:	f022 0201 	bic.w	r2, r2, #1
 8000b3c:	672a      	str	r2, [r5, #112]	; 0x70
 8000b3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b40:	f022 0204 	bic.w	r2, r2, #4
 8000b44:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1ca      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b4a:	f7ff fd63 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b52:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b56:	0798      	lsls	r0, r3, #30
 8000b58:	d5cb      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5a:	f7ff fd5b 	bl	8000614 <HAL_GetTick>
 8000b5e:	1bc0      	subs	r0, r0, r7
 8000b60:	4540      	cmp	r0, r8
 8000b62:	d9f7      	bls.n	8000b54 <HAL_RCC_OscConfig+0x248>
 8000b64:	e719      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b66:	f7ff fd55 	bl	8000614 <HAL_GetTick>
 8000b6a:	1bc0      	subs	r0, r0, r7
 8000b6c:	4540      	cmp	r0, r8
 8000b6e:	d9bd      	bls.n	8000aec <HAL_RCC_OscConfig+0x1e0>
 8000b70:	e713      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b72:	4d1b      	ldr	r5, [pc, #108]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000b74:	68ab      	ldr	r3, [r5, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	f43f aeca 	beq.w	8000914 <HAL_RCC_OscConfig+0x8>
 8000b80:	4e1b      	ldr	r6, [pc, #108]	; (8000bf0 <HAL_RCC_OscConfig+0x2e4>)
 8000b82:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b84:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b86:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b88:	d134      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fd43 	bl	8000614 <HAL_GetTick>
 8000b8e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	0199      	lsls	r1, r3, #6
 8000b94:	d41e      	bmi.n	8000bd4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b96:	6a22      	ldr	r2, [r4, #32]
 8000b98:	69e3      	ldr	r3, [r4, #28]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ba4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ba8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000baa:	4c0d      	ldr	r4, [pc, #52]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bac:	0852      	lsrs	r2, r2, #1
 8000bae:	3a01      	subs	r2, #1
 8000bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bba:	f7ff fd2b 	bl	8000614 <HAL_GetTick>
 8000bbe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	019a      	lsls	r2, r3, #6
 8000bc4:	f53f aebc 	bmi.w	8000940 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc8:	f7ff fd24 	bl	8000614 <HAL_GetTick>
 8000bcc:	1b40      	subs	r0, r0, r5
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f6      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x2b4>
 8000bd2:	e6e2      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd4:	f7ff fd1e 	bl	8000614 <HAL_GetTick>
 8000bd8:	1bc0      	subs	r0, r0, r7
 8000bda:	2802      	cmp	r0, #2
 8000bdc:	d9d8      	bls.n	8000b90 <HAL_RCC_OscConfig+0x284>
 8000bde:	e6dc      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
 8000be0:	40023800 	.word	0x40023800
 8000be4:	42470000 	.word	0x42470000
 8000be8:	42470e80 	.word	0x42470e80
 8000bec:	40007000 	.word	0x40007000
 8000bf0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fd0e 	bl	8000614 <HAL_GetTick>
 8000bf8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	f57f ae9f 	bpl.w	8000940 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c02:	f7ff fd07 	bl	8000614 <HAL_GetTick>
 8000c06:	1b00      	subs	r0, r0, r4
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d9f6      	bls.n	8000bfa <HAL_RCC_OscConfig+0x2ee>
 8000c0c:	e6c5      	b.n	800099a <HAL_RCC_OscConfig+0x8e>
 8000c0e:	bf00      	nop

08000c10 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c10:	4913      	ldr	r1, [pc, #76]	; (8000c60 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c14:	688b      	ldr	r3, [r1, #8]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d003      	beq.n	8000c26 <HAL_RCC_GetSysClockFreq+0x16>
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d003      	beq.n	8000c2a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c22:	4810      	ldr	r0, [pc, #64]	; (8000c64 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c24:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c26:	4810      	ldr	r0, [pc, #64]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c28:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c2a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c2c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c2e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c30:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c34:	bf14      	ite	ne
 8000c36:	480c      	ldrne	r0, [pc, #48]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c38:	480a      	ldreq	r0, [pc, #40]	; (8000c64 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c3e:	bf18      	it	ne
 8000c40:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c46:	fba1 0100 	umull	r0, r1, r1, r0
 8000c4a:	f7ff fb11 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c56:	3301      	adds	r3, #1
 8000c58:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c5e:	bd08      	pop	{r3, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	00f42400 	.word	0x00f42400
 8000c68:	007a1200 	.word	0x007a1200

08000c6c <HAL_RCC_ClockConfig>:
{
 8000c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c70:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c72:	4604      	mov	r4, r0
 8000c74:	b910      	cbnz	r0, 8000c7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c76:	2001      	movs	r0, #1
 8000c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c7c:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <HAL_RCC_ClockConfig+0x124>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	f002 020f 	and.w	r2, r2, #15
 8000c84:	428a      	cmp	r2, r1
 8000c86:	d328      	bcc.n	8000cda <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c88:	6821      	ldr	r1, [r4, #0]
 8000c8a:	078f      	lsls	r7, r1, #30
 8000c8c:	d42d      	bmi.n	8000cea <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c8e:	07c8      	lsls	r0, r1, #31
 8000c90:	d440      	bmi.n	8000d14 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_RCC_ClockConfig+0x124>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f002 020f 	and.w	r2, r2, #15
 8000c9a:	4295      	cmp	r5, r2
 8000c9c:	d366      	bcc.n	8000d6c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c9e:	6822      	ldr	r2, [r4, #0]
 8000ca0:	0751      	lsls	r1, r2, #29
 8000ca2:	d46c      	bmi.n	8000d7e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca4:	0713      	lsls	r3, r2, #28
 8000ca6:	d507      	bpl.n	8000cb8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ca8:	4a3a      	ldr	r2, [pc, #232]	; (8000d94 <HAL_RCC_ClockConfig+0x128>)
 8000caa:	6921      	ldr	r1, [r4, #16]
 8000cac:	6893      	ldr	r3, [r2, #8]
 8000cae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cb2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cb6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cb8:	f7ff ffaa 	bl	8000c10 <HAL_RCC_GetSysClockFreq>
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <HAL_RCC_ClockConfig+0x128>)
 8000cbe:	4a36      	ldr	r2, [pc, #216]	; (8000d98 <HAL_RCC_ClockConfig+0x12c>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	40d8      	lsrs	r0, r3
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <HAL_RCC_ClockConfig+0x130>)
 8000ccc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fc56 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d1c6      	bne.n	8000c76 <HAL_RCC_ClockConfig+0xa>
 8000ce8:	e7ce      	b.n	8000c88 <HAL_RCC_ClockConfig+0x1c>
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cec:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cf0:	bf1e      	ittt	ne
 8000cf2:	689a      	ldrne	r2, [r3, #8]
 8000cf4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cf8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cfa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cfc:	bf42      	ittt	mi
 8000cfe:	689a      	ldrmi	r2, [r3, #8]
 8000d00:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d04:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	68a0      	ldr	r0, [r4, #8]
 8000d0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	e7bc      	b.n	8000c8e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d14:	6862      	ldr	r2, [r4, #4]
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_RCC_ClockConfig+0x128>)
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	d11d      	bne.n	8000d58 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d22:	d0a8      	beq.n	8000c76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d24:	4e1b      	ldr	r6, [pc, #108]	; (8000d94 <HAL_RCC_ClockConfig+0x128>)
 8000d26:	68b3      	ldr	r3, [r6, #8]
 8000d28:	f023 0303 	bic.w	r3, r3, #3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d30:	f7ff fc70 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d34:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d38:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d3a:	68b3      	ldr	r3, [r6, #8]
 8000d3c:	6862      	ldr	r2, [r4, #4]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d46:	d0a4      	beq.n	8000c92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d48:	f7ff fc64 	bl	8000614 <HAL_GetTick>
 8000d4c:	1bc0      	subs	r0, r0, r7
 8000d4e:	4540      	cmp	r0, r8
 8000d50:	d9f3      	bls.n	8000d3a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d52:	2003      	movs	r0, #3
}
 8000d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d58:	1e91      	subs	r1, r2, #2
 8000d5a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d5c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d5e:	d802      	bhi.n	8000d66 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d64:	e7dd      	b.n	8000d22 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d66:	f013 0f02 	tst.w	r3, #2
 8000d6a:	e7da      	b.n	8000d22 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d6c:	b2ea      	uxtb	r2, r5
 8000d6e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	429d      	cmp	r5, r3
 8000d78:	f47f af7d 	bne.w	8000c76 <HAL_RCC_ClockConfig+0xa>
 8000d7c:	e78f      	b.n	8000c9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d7e:	4905      	ldr	r1, [pc, #20]	; (8000d94 <HAL_RCC_ClockConfig+0x128>)
 8000d80:	68e0      	ldr	r0, [r4, #12]
 8000d82:	688b      	ldr	r3, [r1, #8]
 8000d84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e78a      	b.n	8000ca4 <HAL_RCC_ClockConfig+0x38>
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00
 8000d94:	40023800 	.word	0x40023800
 8000d98:	080025e7 	.word	0x080025e7
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dae:	6810      	ldr	r0, [r2, #0]
}
 8000db0:	40d8      	lsrs	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	40023800 	.word	0x40023800
 8000db8:	080025f7 	.word	0x080025f7
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dca:	5cd3      	ldrb	r3, [r2, r3]
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dce:	6810      	ldr	r0, [r2, #0]
}
 8000dd0:	40d8      	lsrs	r0, r3
 8000dd2:	4770      	bx	lr
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	080025f7 	.word	0x080025f7
 8000ddc:	20000008 	.word	0x20000008

08000de0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000de0:	6803      	ldr	r3, [r0, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000de8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000dea:	695a      	ldr	r2, [r3, #20]
 8000dec:	f022 0201 	bic.w	r2, r2, #1
 8000df0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000df2:	2320      	movs	r3, #32
 8000df4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000df8:	4770      	bx	lr
	...

08000dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e00:	6806      	ldr	r6, [r0, #0]
 8000e02:	68c2      	ldr	r2, [r0, #12]
 8000e04:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e06:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	6133      	str	r3, [r6, #16]
{
 8000e10:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e12:	6883      	ldr	r3, [r0, #8]
 8000e14:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000e16:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e18:	4303      	orrs	r3, r0
 8000e1a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000e1c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e20:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000e22:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e26:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e2c:	6973      	ldr	r3, [r6, #20]
 8000e2e:	69a2      	ldr	r2, [r4, #24]
 8000e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e34:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e36:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e3a:	6173      	str	r3, [r6, #20]
 8000e3c:	4b7a      	ldr	r3, [pc, #488]	; (8001028 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e3e:	d17c      	bne.n	8000f3a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d003      	beq.n	8000e4c <UART_SetConfig+0x50>
 8000e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e48:	429e      	cmp	r6, r3
 8000e4a:	d144      	bne.n	8000ed6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e4c:	f7ff ffb8 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000e50:	2519      	movs	r5, #25
 8000e52:	fb05 f300 	mul.w	r3, r5, r0
 8000e56:	6860      	ldr	r0, [r4, #4]
 8000e58:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e5c:	0040      	lsls	r0, r0, #1
 8000e5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e62:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e6a:	f7ff ffa9 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000e6e:	6863      	ldr	r3, [r4, #4]
 8000e70:	4368      	muls	r0, r5
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e78:	f7ff ffa2 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000e7c:	6863      	ldr	r3, [r4, #4]
 8000e7e:	4368      	muls	r0, r5
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e86:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e8a:	fb09 7313 	mls	r3, r9, r3, r7
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	3332      	adds	r3, #50	; 0x32
 8000e92:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000e9c:	f7ff ff90 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000ea0:	6862      	ldr	r2, [r4, #4]
 8000ea2:	4368      	muls	r0, r5
 8000ea4:	0052      	lsls	r2, r2, #1
 8000ea6:	fbb0 faf2 	udiv	sl, r0, r2
 8000eaa:	f7ff ff89 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000eae:	6863      	ldr	r3, [r4, #4]
 8000eb0:	4368      	muls	r0, r5
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ebc:	fb09 a313 	mls	r3, r9, r3, sl
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	3332      	adds	r3, #50	; 0x32
 8000ec4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ece:	443b      	add	r3, r7
 8000ed0:	60b3      	str	r3, [r6, #8]
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ed6:	f7ff ff63 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000eda:	2519      	movs	r5, #25
 8000edc:	fb05 f300 	mul.w	r3, r5, r0
 8000ee0:	6860      	ldr	r0, [r4, #4]
 8000ee2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000ee6:	0040      	lsls	r0, r0, #1
 8000ee8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000eec:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ef0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000ef4:	f7ff ff54 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	4368      	muls	r0, r5
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f02:	f7ff ff4d 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000f06:	6863      	ldr	r3, [r4, #4]
 8000f08:	4368      	muls	r0, r5
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f10:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f14:	fb09 7313 	mls	r3, r9, r3, r7
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	3332      	adds	r3, #50	; 0x32
 8000f1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000f26:	f7ff ff3b 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000f2a:	6862      	ldr	r2, [r4, #4]
 8000f2c:	4368      	muls	r0, r5
 8000f2e:	0052      	lsls	r2, r2, #1
 8000f30:	fbb0 faf2 	udiv	sl, r0, r2
 8000f34:	f7ff ff34 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000f38:	e7b9      	b.n	8000eae <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f3a:	429e      	cmp	r6, r3
 8000f3c:	d002      	beq.n	8000f44 <UART_SetConfig+0x148>
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <UART_SetConfig+0x230>)
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d140      	bne.n	8000fc6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f44:	f7ff ff3c 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000f48:	6867      	ldr	r7, [r4, #4]
 8000f4a:	2519      	movs	r5, #25
 8000f4c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f50:	fb05 f300 	mul.w	r3, r5, r0
 8000f54:	00bf      	lsls	r7, r7, #2
 8000f56:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f5e:	011f      	lsls	r7, r3, #4
 8000f60:	f7ff ff2e 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000f64:	6863      	ldr	r3, [r4, #4]
 8000f66:	4368      	muls	r0, r5
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fbb0 f8f3 	udiv	r8, r0, r3
 8000f6e:	f7ff ff27 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	4368      	muls	r0, r5
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f7c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f80:	fb09 8313 	mls	r3, r9, r3, r8
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	3332      	adds	r3, #50	; 0x32
 8000f88:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f8c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000f90:	f7ff ff16 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8000f94:	6862      	ldr	r2, [r4, #4]
 8000f96:	4368      	muls	r0, r5
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	fbb0 faf2 	udiv	sl, r0, r2
 8000f9e:	f7ff ff0f 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fa2:	6863      	ldr	r3, [r4, #4]
 8000fa4:	4368      	muls	r0, r5
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fac:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fb0:	fb09 a313 	mls	r3, r9, r3, sl
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	3332      	adds	r3, #50	; 0x32
 8000fb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	ea43 0308 	orr.w	r3, r3, r8
 8000fc4:	e783      	b.n	8000ece <UART_SetConfig+0xd2>
 8000fc6:	f7ff feeb 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000fca:	6867      	ldr	r7, [r4, #4]
 8000fcc:	2519      	movs	r5, #25
 8000fce:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fd2:	fb05 f300 	mul.w	r3, r5, r0
 8000fd6:	00bf      	lsls	r7, r7, #2
 8000fd8:	fbb3 f3f7 	udiv	r3, r3, r7
 8000fdc:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fe0:	011f      	lsls	r7, r3, #4
 8000fe2:	f7ff fedd 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	4368      	muls	r0, r5
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fbb0 f8f3 	udiv	r8, r0, r3
 8000ff0:	f7ff fed6 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8000ff4:	6863      	ldr	r3, [r4, #4]
 8000ff6:	4368      	muls	r0, r5
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001002:	fb09 8313 	mls	r3, r9, r3, r8
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	3332      	adds	r3, #50	; 0x32
 800100a:	fbb3 f3f9 	udiv	r3, r3, r9
 800100e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001012:	f7ff fec5 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8001016:	6862      	ldr	r2, [r4, #4]
 8001018:	4368      	muls	r0, r5
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	fbb0 faf2 	udiv	sl, r0, r2
 8001020:	f7ff febe 	bl	8000da0 <HAL_RCC_GetPCLK1Freq>
 8001024:	e7bd      	b.n	8000fa2 <UART_SetConfig+0x1a6>
 8001026:	bf00      	nop
 8001028:	40011000 	.word	0x40011000
 800102c:	40011400 	.word	0x40011400

08001030 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	4604      	mov	r4, r0
 8001034:	460e      	mov	r6, r1
 8001036:	4617      	mov	r7, r2
 8001038:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800103a:	6821      	ldr	r1, [r4, #0]
 800103c:	680b      	ldr	r3, [r1, #0]
 800103e:	ea36 0303 	bics.w	r3, r6, r3
 8001042:	d101      	bne.n	8001048 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001044:	2000      	movs	r0, #0
}
 8001046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001048:	1c6b      	adds	r3, r5, #1
 800104a:	d0f7      	beq.n	800103c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800104c:	b995      	cbnz	r5, 8001074 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001056:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001060:	2320      	movs	r3, #32
 8001062:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001066:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800106a:	2300      	movs	r3, #0
 800106c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001070:	2003      	movs	r0, #3
 8001072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001074:	f7ff face 	bl	8000614 <HAL_GetTick>
 8001078:	1bc0      	subs	r0, r0, r7
 800107a:	4285      	cmp	r5, r0
 800107c:	d2dd      	bcs.n	800103a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800107e:	e7e6      	b.n	800104e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001080 <HAL_UART_Init>:
{
 8001080:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001082:	4604      	mov	r4, r0
 8001084:	b340      	cbz	r0, 80010d8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001086:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800108a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800108e:	b91b      	cbnz	r3, 8001098 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001090:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001094:	f000 fa6a 	bl	800156c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001098:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800109a:	2324      	movs	r3, #36	; 0x24
 800109c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80010a0:	68d3      	ldr	r3, [r2, #12]
 80010a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010a6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80010a8:	4620      	mov	r0, r4
 80010aa:	f7ff fea7 	bl	8000dfc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010be:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010c6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010c8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80010ca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010cc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80010ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80010d2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80010d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
}
 80010da:	bd10      	pop	{r4, pc}

080010dc <HAL_UART_Transmit>:
{
 80010dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80010e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010e6:	2b20      	cmp	r3, #32
{
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80010ee:	d14f      	bne.n	8001190 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80010f0:	2900      	cmp	r1, #0
 80010f2:	d04a      	beq.n	800118a <HAL_UART_Transmit+0xae>
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d048      	beq.n	800118a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80010f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d047      	beq.n	8001190 <HAL_UART_Transmit+0xb4>
 8001100:	2301      	movs	r3, #1
 8001102:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800110a:	2321      	movs	r3, #33	; 0x21
 800110c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001110:	f7ff fa80 	bl	8000614 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001114:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001118:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800111a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800111e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001120:	b29b      	uxth	r3, r3
 8001122:	b96b      	cbnz	r3, 8001140 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4632      	mov	r2, r6
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff ff80 	bl	8001030 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001130:	b9b0      	cbnz	r0, 8001160 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001132:	2320      	movs	r3, #32
 8001134:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001138:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001140:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001142:	3b01      	subs	r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001148:	68a3      	ldr	r3, [r4, #8]
 800114a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800114e:	4632      	mov	r2, r6
 8001150:	463b      	mov	r3, r7
 8001152:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001156:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001158:	d10e      	bne.n	8001178 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800115a:	f7ff ff69 	bl	8001030 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800115e:	b110      	cbz	r0, 8001166 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001160:	2003      	movs	r0, #3
 8001162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001166:	882b      	ldrh	r3, [r5, #0]
 8001168:	6822      	ldr	r2, [r4, #0]
 800116a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800116e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001170:	6923      	ldr	r3, [r4, #16]
 8001172:	b943      	cbnz	r3, 8001186 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001174:	3502      	adds	r5, #2
 8001176:	e7d2      	b.n	800111e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001178:	f7ff ff5a 	bl	8001030 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800117c:	2800      	cmp	r0, #0
 800117e:	d1ef      	bne.n	8001160 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	782a      	ldrb	r2, [r5, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	3501      	adds	r5, #1
 8001188:	e7c9      	b.n	800111e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800118a:	2001      	movs	r0, #1
 800118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001190:	2002      	movs	r0, #2
}
 8001192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001196 <HAL_UART_TxCpltCallback>:
 8001196:	4770      	bx	lr

08001198 <HAL_UART_RxCpltCallback>:
 8001198:	4770      	bx	lr

0800119a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800119a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800119e:	2b22      	cmp	r3, #34	; 0x22
{
 80011a0:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80011a2:	d136      	bne.n	8001212 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011a4:	6883      	ldr	r3, [r0, #8]
 80011a6:	6901      	ldr	r1, [r0, #16]
 80011a8:	6802      	ldr	r2, [r0, #0]
 80011aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011b0:	d123      	bne.n	80011fa <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011b2:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80011b4:	b9e9      	cbnz	r1, 80011f2 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ba:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80011be:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80011c0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80011c2:	3c01      	subs	r4, #1
 80011c4:	b2a4      	uxth	r4, r4
 80011c6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80011c8:	b98c      	cbnz	r4, 80011ee <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80011ca:	6803      	ldr	r3, [r0, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	f022 0220 	bic.w	r2, r2, #32
 80011d2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011da:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80011e4:	2320      	movs	r3, #32
 80011e6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80011ea:	f7ff ffd5 	bl	8001198 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80011ee:	2000      	movs	r0, #0
}
 80011f0:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f823 2b01 	strh.w	r2, [r3], #1
 80011f8:	e7e1      	b.n	80011be <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80011fa:	b921      	cbnz	r1, 8001206 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	6852      	ldr	r2, [r2, #4]
 8001200:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e7dc      	b.n	80011c0 <UART_Receive_IT+0x26>
 8001206:	6852      	ldr	r2, [r2, #4]
 8001208:	1c59      	adds	r1, r3, #1
 800120a:	6281      	str	r1, [r0, #40]	; 0x28
 800120c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001210:	e7f7      	b.n	8001202 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001212:	2002      	movs	r0, #2
 8001214:	bd10      	pop	{r4, pc}

08001216 <HAL_UART_ErrorCallback>:
 8001216:	4770      	bx	lr

08001218 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001218:	6803      	ldr	r3, [r0, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800121c:	68d9      	ldr	r1, [r3, #12]
{
 800121e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001220:	0716      	lsls	r6, r2, #28
{
 8001222:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001224:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001226:	d107      	bne.n	8001238 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001228:	0696      	lsls	r6, r2, #26
 800122a:	d55a      	bpl.n	80012e2 <HAL_UART_IRQHandler+0xca>
 800122c:	068d      	lsls	r5, r1, #26
 800122e:	d558      	bpl.n	80012e2 <HAL_UART_IRQHandler+0xca>
}
 8001230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001234:	f7ff bfb1 	b.w	800119a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001238:	f015 0501 	ands.w	r5, r5, #1
 800123c:	d102      	bne.n	8001244 <HAL_UART_IRQHandler+0x2c>
 800123e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001242:	d04e      	beq.n	80012e2 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001244:	07d3      	lsls	r3, r2, #31
 8001246:	d505      	bpl.n	8001254 <HAL_UART_IRQHandler+0x3c>
 8001248:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800124a:	bf42      	ittt	mi
 800124c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800124e:	f043 0301 	orrmi.w	r3, r3, #1
 8001252:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001254:	0750      	lsls	r0, r2, #29
 8001256:	d504      	bpl.n	8001262 <HAL_UART_IRQHandler+0x4a>
 8001258:	b11d      	cbz	r5, 8001262 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800125a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001262:	0793      	lsls	r3, r2, #30
 8001264:	d504      	bpl.n	8001270 <HAL_UART_IRQHandler+0x58>
 8001266:	b11d      	cbz	r5, 8001270 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001268:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001270:	0716      	lsls	r6, r2, #28
 8001272:	d504      	bpl.n	800127e <HAL_UART_IRQHandler+0x66>
 8001274:	b11d      	cbz	r5, 800127e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800127e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d066      	beq.n	8001352 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001284:	0695      	lsls	r5, r2, #26
 8001286:	d504      	bpl.n	8001292 <HAL_UART_IRQHandler+0x7a>
 8001288:	0688      	lsls	r0, r1, #26
 800128a:	d502      	bpl.n	8001292 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff ff84 	bl	800119a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001296:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001298:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800129a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800129c:	d402      	bmi.n	80012a4 <HAL_UART_IRQHandler+0x8c>
 800129e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80012a2:	d01a      	beq.n	80012da <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80012a4:	f7ff fd9c 	bl	8000de0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	0652      	lsls	r2, r2, #25
 80012ae:	d510      	bpl.n	80012d2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012b0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80012b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012b8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80012ba:	b150      	cbz	r0, 80012d2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_UART_IRQHandler+0x13c>)
 80012be:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012c0:	f7ff fa2c 	bl	800071c <HAL_DMA_Abort_IT>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d044      	beq.n	8001352 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80012ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80012d0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff ff9f 	bl	8001216 <HAL_UART_ErrorCallback>
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80012da:	f7ff ff9c 	bl	8001216 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012de:	63e5      	str	r5, [r4, #60]	; 0x3c
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80012e2:	0616      	lsls	r6, r2, #24
 80012e4:	d527      	bpl.n	8001336 <HAL_UART_IRQHandler+0x11e>
 80012e6:	060d      	lsls	r5, r1, #24
 80012e8:	d525      	bpl.n	8001336 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80012ea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80012ee:	2a21      	cmp	r2, #33	; 0x21
 80012f0:	d12f      	bne.n	8001352 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012f2:	68a2      	ldr	r2, [r4, #8]
 80012f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80012f8:	6a22      	ldr	r2, [r4, #32]
 80012fa:	d117      	bne.n	800132c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80012fc:	8811      	ldrh	r1, [r2, #0]
 80012fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001302:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001304:	6921      	ldr	r1, [r4, #16]
 8001306:	b979      	cbnz	r1, 8001328 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001308:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800130a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800130c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800130e:	3a01      	subs	r2, #1
 8001310:	b292      	uxth	r2, r2
 8001312:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001314:	b9ea      	cbnz	r2, 8001352 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800131c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001328:	3201      	adds	r2, #1
 800132a:	e7ee      	b.n	800130a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800132c:	1c51      	adds	r1, r2, #1
 800132e:	6221      	str	r1, [r4, #32]
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	e7ea      	b.n	800130c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001336:	0650      	lsls	r0, r2, #25
 8001338:	d50b      	bpl.n	8001352 <HAL_UART_IRQHandler+0x13a>
 800133a:	064a      	lsls	r2, r1, #25
 800133c:	d509      	bpl.n	8001352 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001344:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001346:	2320      	movs	r3, #32
 8001348:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800134c:	4620      	mov	r0, r4
 800134e:	f7ff ff22 	bl	8001196 <HAL_UART_TxCpltCallback>
 8001352:	bd70      	pop	{r4, r5, r6, pc}
 8001354:	08001359 	.word	0x08001359

08001358 <UART_DMAAbortOnError>:
{
 8001358:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800135a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001360:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001362:	f7ff ff58 	bl	8001216 <HAL_UART_ErrorCallback>
 8001366:	bd08      	pop	{r3, pc}

08001368 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8001368:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  temp2 = huart->RxState;
 800136c:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 8001370:	4310      	orrs	r0, r2
 8001372:	4770      	bx	lr

08001374 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8001374:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2,ptr,len,1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800137a:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2,ptr,len,1000);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <_write+0x14>)
 800137e:	b292      	uxth	r2, r2
 8001380:	f7ff feac 	bl	80010dc <HAL_UART_Transmit>
  return len;
}
 8001384:	4620      	mov	r0, r4
 8001386:	bd10      	pop	{r4, pc}
 8001388:	200000a0 	.word	0x200000a0

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b530      	push	{r4, r5, lr}
 800138e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001390:	2230      	movs	r2, #48	; 0x30
 8001392:	2100      	movs	r1, #0
 8001394:	a808      	add	r0, sp, #32
 8001396:	f000 fa13 	bl	80017c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139a:	2100      	movs	r1, #0
 800139c:	2214      	movs	r2, #20
 800139e:	a803      	add	r0, sp, #12
 80013a0:	f000 fa0e 	bl	80017c0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	2400      	movs	r4, #0
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <SystemClock_Config+0x8c>)
 80013a8:	9401      	str	r4, [sp, #4]
 80013aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <SystemClock_Config+0x90>)
 80013be:	9402      	str	r4, [sp, #8]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013e2:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013ec:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ee:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f2:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f7ff fa8a 	bl	800090c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001400:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001402:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001408:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001410:	f7ff fc2c 	bl	8000c6c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001414:	b015      	add	sp, #84	; 0x54
 8001416:	bd30      	pop	{r4, r5, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <main>:
{
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	b088      	sub	sp, #32
  HAL_Init();
 8001424:	f7ff f8d0 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8001428:	f7ff ffb0 	bl	800138c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	2214      	movs	r2, #20
 800142e:	2100      	movs	r1, #0
 8001430:	a803      	add	r0, sp, #12
 8001432:	f000 f9c5 	bl	80017c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2400      	movs	r4, #0
 8001438:	4b37      	ldr	r3, [pc, #220]	; (8001518 <main+0xf8>)
 800143a:	9400      	str	r4, [sp, #0]
 800143c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800143e:	4837      	ldr	r0, [pc, #220]	; (800151c <main+0xfc>)
        my_put_string (add);
 8001440:	4e37      	ldr	r6, [pc, #220]	; (8001520 <main+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	f042 0204 	orr.w	r2, r2, #4
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
 8001448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144a:	f002 0204 	and.w	r2, r2, #4
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	9401      	str	r4, [sp, #4]
 8001454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
 800145c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	9402      	str	r4, [sp, #8]
 8001468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	631a      	str	r2, [r3, #48]	; 0x30
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001476:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800147a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001480:	f7ff fa3e 	bl	8000900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800148a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	4823      	ldr	r0, [pc, #140]	; (800151c <main+0xfc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f7ff f953 	bl	8000740 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800149a:	4822      	ldr	r0, [pc, #136]	; (8001524 <main+0x104>)
  huart2.Init.BaudRate = 115200;
 800149c:	4a22      	ldr	r2, [pc, #136]	; (8001528 <main+0x108>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80014a0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014a4:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014aa:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ac:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ae:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b0:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b4:	f7ff fde4 	bl	8001080 <HAL_UART_Init>
  hsSysCnt = HAL_GetTick ();
 80014b8:	f7ff f8ac 	bl	8000614 <HAL_GetTick>
        HAL_GPIO_WritePin (GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80014bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  hsSysCnt = HAL_GetTick ();
 80014c0:	4605      	mov	r5, r0
        HAL_GPIO_WritePin (GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80014c2:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
     if((HAL_GetTick() - hsSysCnt) > 1000)
 80014c6:	f7ff f8a5 	bl	8000614 <HAL_GetTick>
 80014ca:	1b40      	subs	r0, r0, r5
 80014cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014d0:	d90b      	bls.n	80014ea <main+0xca>
        hsSysCnt = ticks = HAL_GetTick ();
 80014d2:	f7ff f89f 	bl	8000614 <HAL_GetTick>
 80014d6:	4605      	mov	r5, r0
        my_put_string (add);
 80014d8:	4630      	mov	r0, r6
 80014da:	f000 f903 	bl	80016e4 <my_put_string>
        HAL_GPIO_WritePin (GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fa0b 	bl	8000900 <HAL_GPIO_WritePin>
     i++;
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <main+0x10c>)
 80014ec:	6813      	ldr	r3, [r2, #0]
     HAL_Delay (1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     i++;
 80014f2:	3301      	adds	r3, #1
 80014f4:	6013      	str	r3, [r2, #0]
     HAL_Delay (1000);
 80014f6:	f7ff f893 	bl	8000620 <HAL_Delay>
     printf("TEST");
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <main+0x110>)
 80014fc:	f000 f968 	bl	80017d0 <iprintf>
     HAL_GPIO_WritePin (GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001500:	4620      	mov	r0, r4
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001508:	f7ff f9fa 	bl	8000900 <HAL_GPIO_WritePin>
     HAL_Delay (1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001510:	f7ff f886 	bl	8000620 <HAL_Delay>
  {
 8001514:	e7d7      	b.n	80014c6 <main+0xa6>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40020800 	.word	0x40020800
 8001520:	080025d8 	.word	0x080025d8
 8001524:	200000a0 	.word	0x200000a0
 8001528:	40004400 	.word	0x40004400
 800152c:	2000008c 	.word	0x2000008c
 8001530:	080025e2 	.word	0x080025e2

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x34>)
 8001538:	2100      	movs	r1, #0
 800153a:	9100      	str	r1, [sp, #0]
 800153c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800153e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001542:	645a      	str	r2, [r3, #68]	; 0x44
 8001544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001546:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	9101      	str	r1, [sp, #4]
 8001550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001552:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	b002      	add	sp, #8
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b510      	push	{r4, lr}
 800156e:	4604      	mov	r4, r0
 8001570:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	2214      	movs	r2, #20
 8001574:	2100      	movs	r1, #0
 8001576:	a803      	add	r0, sp, #12
 8001578:	f000 f922 	bl	80017c0 <memset>
  if(huart->Instance==USART2)
 800157c:	6822      	ldr	r2, [r4, #0]
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_UART_MspInit+0x78>)
 8001580:	429a      	cmp	r2, r3
 8001582:	d12c      	bne.n	80015de <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001584:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001588:	2400      	movs	r4, #0
 800158a:	9401      	str	r4, [sp, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	4816      	ldr	r0, [pc, #88]	; (80015e8 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001590:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
 8001596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001598:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800159c:	9201      	str	r2, [sp, #4]
 800159e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	9402      	str	r4, [sp, #8]
 80015a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015b4:	230c      	movs	r3, #12
 80015b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c6:	2307      	movs	r3, #7
 80015c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f7ff f8b9 	bl	8000740 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ce:	2026      	movs	r0, #38	; 0x26
 80015d0:	4622      	mov	r2, r4
 80015d2:	4621      	mov	r1, r4
 80015d4:	f7ff f84a 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d8:	2026      	movs	r0, #38	; 0x26
 80015da:	f7ff f87b 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015de:	b008      	add	sp, #32
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	bf00      	nop
 80015e4:	40004400 	.word	0x40004400
 80015e8:	40020000 	.word	0x40020000

080015ec <NMI_Handler>:
 80015ec:	4770      	bx	lr

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler>

080015f6 <SVC_Handler>:
 80015f6:	4770      	bx	lr

080015f8 <DebugMon_Handler>:
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f7fe bffe 	b.w	80005fc <HAL_IncTick>

08001600 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001600:	4801      	ldr	r0, [pc, #4]	; (8001608 <USART2_IRQHandler+0x8>)
 8001602:	f7ff be09 	b.w	8001218 <HAL_UART_IRQHandler>
 8001606:	bf00      	nop
 8001608:	200000a0 	.word	0x200000a0

0800160c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	460e      	mov	r6, r1
 8001610:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	460c      	mov	r4, r1
 8001614:	1ba3      	subs	r3, r4, r6
 8001616:	429d      	cmp	r5, r3
 8001618:	dc01      	bgt.n	800161e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800161a:	4628      	mov	r0, r5
 800161c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800161e:	f3af 8000 	nop.w
 8001622:	f804 0b01 	strb.w	r0, [r4], #1
 8001626:	e7f5      	b.n	8001614 <_read+0x8>

08001628 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001628:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <_sbrk+0x2c>)
 800162c:	6819      	ldr	r1, [r3, #0]
{
 800162e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001630:	b909      	cbnz	r1, 8001636 <_sbrk+0xe>
		heap_end = &end;
 8001632:	4909      	ldr	r1, [pc, #36]	; (8001658 <_sbrk+0x30>)
 8001634:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001636:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001638:	4669      	mov	r1, sp
 800163a:	4402      	add	r2, r0
 800163c:	428a      	cmp	r2, r1
 800163e:	d906      	bls.n	800164e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001640:	f000 f894 	bl	800176c <__errno>
 8001644:	230c      	movs	r3, #12
 8001646:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800164e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001650:	bd08      	pop	{r3, pc}
 8001652:	bf00      	nop
 8001654:	20000090 	.word	0x20000090
 8001658:	200000e4 	.word	0x200000e4

0800165c <_close>:

int _close(int file)
{
	return -1;
}
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	4770      	bx	lr

08001662 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001666:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001668:	2000      	movs	r0, #0
 800166a:	4770      	bx	lr

0800166c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800166c:	2001      	movs	r0, #1
 800166e:	4770      	bx	lr

08001670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001670:	2000      	movs	r0, #0
 8001672:	4770      	bx	lr

08001674 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	490f      	ldr	r1, [pc, #60]	; (80016b4 <SystemInit+0x40>)
 8001676:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800167a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <SystemInit+0x44>)
 8001684:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001686:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001688:	f042 0201 	orr.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800168e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001696:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800169a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <SystemInit+0x48>)
 800169e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016ae:	608b      	str	r3, [r1, #8]
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	24003010 	.word	0x24003010

080016c0 <put_char2>:
#include "global_hs.h"



HAL_StatusTypeDef put_char2( char c_data)
{
 80016c0:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef ret ;  
  uc08 buf[2]= {0};
  buf[0]  = c_data;
 80016c2:	a902      	add	r1, sp, #8
  uc08 buf[2]= {0};
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  ret  = HAL_UART_Transmit(&huart2,buf,1,1000); // 
 80016ca:	2201      	movs	r2, #1
  buf[0]  = c_data;
 80016cc:	f801 0d04 	strb.w	r0, [r1, #-4]!
  ret  = HAL_UART_Transmit(&huart2,buf,1,1000); // 
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <put_char2+0x20>)
 80016d6:	f7ff fd01 	bl	80010dc <HAL_UART_Transmit>
  return ret;
}
 80016da:	b003      	add	sp, #12
 80016dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80016e0:	200000a0 	.word	0x200000a0

080016e4 <my_put_string>:

void my_put_string(  char * c_data  )
{
 80016e4:	b570      	push	{r4, r5, r6, lr}
  while(*c_data != 0)
  {
    if(HAL_UART_GetState(&huart2) == HAL_BUSY)
 80016e6:	4e0b      	ldr	r6, [pc, #44]	; (8001714 <my_put_string+0x30>)
{
 80016e8:	4604      	mov	r4, r0
  while(*c_data != 0)
 80016ea:	7823      	ldrb	r3, [r4, #0]
 80016ec:	b183      	cbz	r3, 8001710 <my_put_string+0x2c>
    if(HAL_UART_GetState(&huart2) == HAL_BUSY)
 80016ee:	4630      	mov	r0, r6
 80016f0:	f7ff fe3a 	bl	8001368 <HAL_UART_GetState>
 80016f4:	2802      	cmp	r0, #2
 80016f6:	d105      	bne.n	8001704 <my_put_string+0x20>
    {
      HAL_Delay (1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7fe ff91 	bl	8000620 <HAL_Delay>
 80016fe:	4625      	mov	r5, r4
 8001700:	462c      	mov	r4, r5
 8001702:	e7f2      	b.n	80016ea <my_put_string+0x6>
    }
    else 
    {
      if(put_char2(*c_data++) != HAL_OK) break;
 8001704:	7820      	ldrb	r0, [r4, #0]
 8001706:	1c65      	adds	r5, r4, #1
 8001708:	f7ff ffda 	bl	80016c0 <put_char2>
 800170c:	2800      	cmp	r0, #0
 800170e:	d0f7      	beq.n	8001700 <my_put_string+0x1c>
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	bf00      	nop
 8001714:	200000a0 	.word	0x200000a0

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800171c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171e:	e003      	b.n	8001728 <LoopCopyDataInit>

08001720 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001722:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001724:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001726:	3104      	adds	r1, #4

08001728 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800172c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001730:	d3f6      	bcc.n	8001720 <CopyDataInit>
  ldr  r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001734:	e002      	b.n	800173c <LoopFillZerobss>

08001736 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001736:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001738:	f842 3b04 	str.w	r3, [r2], #4

0800173c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800173e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001740:	d3f9      	bcc.n	8001736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001742:	f7ff ff97 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f000 f817 	bl	8001778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff fe69 	bl	8001420 <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001750:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001754:	080026a8 	.word	0x080026a8
  ldr  r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800175c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001760:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001764:	200000e4 	.word	0x200000e4

08001768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <__errno>:
 800176c:	4b01      	ldr	r3, [pc, #4]	; (8001774 <__errno+0x8>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000000c 	.word	0x2000000c

08001778 <__libc_init_array>:
 8001778:	b570      	push	{r4, r5, r6, lr}
 800177a:	4e0d      	ldr	r6, [pc, #52]	; (80017b0 <__libc_init_array+0x38>)
 800177c:	4c0d      	ldr	r4, [pc, #52]	; (80017b4 <__libc_init_array+0x3c>)
 800177e:	1ba4      	subs	r4, r4, r6
 8001780:	10a4      	asrs	r4, r4, #2
 8001782:	2500      	movs	r5, #0
 8001784:	42a5      	cmp	r5, r4
 8001786:	d109      	bne.n	800179c <__libc_init_array+0x24>
 8001788:	4e0b      	ldr	r6, [pc, #44]	; (80017b8 <__libc_init_array+0x40>)
 800178a:	4c0c      	ldr	r4, [pc, #48]	; (80017bc <__libc_init_array+0x44>)
 800178c:	f000 ff18 	bl	80025c0 <_init>
 8001790:	1ba4      	subs	r4, r4, r6
 8001792:	10a4      	asrs	r4, r4, #2
 8001794:	2500      	movs	r5, #0
 8001796:	42a5      	cmp	r5, r4
 8001798:	d105      	bne.n	80017a6 <__libc_init_array+0x2e>
 800179a:	bd70      	pop	{r4, r5, r6, pc}
 800179c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017a0:	4798      	blx	r3
 80017a2:	3501      	adds	r5, #1
 80017a4:	e7ee      	b.n	8001784 <__libc_init_array+0xc>
 80017a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017aa:	4798      	blx	r3
 80017ac:	3501      	adds	r5, #1
 80017ae:	e7f2      	b.n	8001796 <__libc_init_array+0x1e>
 80017b0:	080026a0 	.word	0x080026a0
 80017b4:	080026a0 	.word	0x080026a0
 80017b8:	080026a0 	.word	0x080026a0
 80017bc:	080026a4 	.word	0x080026a4

080017c0 <memset>:
 80017c0:	4402      	add	r2, r0
 80017c2:	4603      	mov	r3, r0
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d100      	bne.n	80017ca <memset+0xa>
 80017c8:	4770      	bx	lr
 80017ca:	f803 1b01 	strb.w	r1, [r3], #1
 80017ce:	e7f9      	b.n	80017c4 <memset+0x4>

080017d0 <iprintf>:
 80017d0:	b40f      	push	{r0, r1, r2, r3}
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <iprintf+0x2c>)
 80017d4:	b513      	push	{r0, r1, r4, lr}
 80017d6:	681c      	ldr	r4, [r3, #0]
 80017d8:	b124      	cbz	r4, 80017e4 <iprintf+0x14>
 80017da:	69a3      	ldr	r3, [r4, #24]
 80017dc:	b913      	cbnz	r3, 80017e4 <iprintf+0x14>
 80017de:	4620      	mov	r0, r4
 80017e0:	f000 f8b4 	bl	800194c <__sinit>
 80017e4:	ab05      	add	r3, sp, #20
 80017e6:	9a04      	ldr	r2, [sp, #16]
 80017e8:	68a1      	ldr	r1, [r4, #8]
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	4620      	mov	r0, r4
 80017ee:	f000 f9d1 	bl	8001b94 <_vfiprintf_r>
 80017f2:	b002      	add	sp, #8
 80017f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017f8:	b004      	add	sp, #16
 80017fa:	4770      	bx	lr
 80017fc:	2000000c 	.word	0x2000000c

08001800 <__sread>:
 8001800:	b510      	push	{r4, lr}
 8001802:	460c      	mov	r4, r1
 8001804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001808:	f000 fc70 	bl	80020ec <_read_r>
 800180c:	2800      	cmp	r0, #0
 800180e:	bfab      	itete	ge
 8001810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001812:	89a3      	ldrhlt	r3, [r4, #12]
 8001814:	181b      	addge	r3, r3, r0
 8001816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800181a:	bfac      	ite	ge
 800181c:	6563      	strge	r3, [r4, #84]	; 0x54
 800181e:	81a3      	strhlt	r3, [r4, #12]
 8001820:	bd10      	pop	{r4, pc}

08001822 <__swrite>:
 8001822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001826:	461f      	mov	r7, r3
 8001828:	898b      	ldrh	r3, [r1, #12]
 800182a:	05db      	lsls	r3, r3, #23
 800182c:	4605      	mov	r5, r0
 800182e:	460c      	mov	r4, r1
 8001830:	4616      	mov	r6, r2
 8001832:	d505      	bpl.n	8001840 <__swrite+0x1e>
 8001834:	2302      	movs	r3, #2
 8001836:	2200      	movs	r2, #0
 8001838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800183c:	f000 f910 	bl	8001a60 <_lseek_r>
 8001840:	89a3      	ldrh	r3, [r4, #12]
 8001842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800184a:	81a3      	strh	r3, [r4, #12]
 800184c:	4632      	mov	r2, r6
 800184e:	463b      	mov	r3, r7
 8001850:	4628      	mov	r0, r5
 8001852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001856:	f000 b817 	b.w	8001888 <_write_r>

0800185a <__sseek>:
 800185a:	b510      	push	{r4, lr}
 800185c:	460c      	mov	r4, r1
 800185e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001862:	f000 f8fd 	bl	8001a60 <_lseek_r>
 8001866:	1c43      	adds	r3, r0, #1
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	bf15      	itete	ne
 800186c:	6560      	strne	r0, [r4, #84]	; 0x54
 800186e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001876:	81a3      	strheq	r3, [r4, #12]
 8001878:	bf18      	it	ne
 800187a:	81a3      	strhne	r3, [r4, #12]
 800187c:	bd10      	pop	{r4, pc}

0800187e <__sclose>:
 800187e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001882:	f000 b813 	b.w	80018ac <_close_r>
	...

08001888 <_write_r>:
 8001888:	b538      	push	{r3, r4, r5, lr}
 800188a:	4c07      	ldr	r4, [pc, #28]	; (80018a8 <_write_r+0x20>)
 800188c:	4605      	mov	r5, r0
 800188e:	4608      	mov	r0, r1
 8001890:	4611      	mov	r1, r2
 8001892:	2200      	movs	r2, #0
 8001894:	6022      	str	r2, [r4, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	f7ff fd6c 	bl	8001374 <_write>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d102      	bne.n	80018a6 <_write_r+0x1e>
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	b103      	cbz	r3, 80018a6 <_write_r+0x1e>
 80018a4:	602b      	str	r3, [r5, #0]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	200000e0 	.word	0x200000e0

080018ac <_close_r>:
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4c06      	ldr	r4, [pc, #24]	; (80018c8 <_close_r+0x1c>)
 80018b0:	2300      	movs	r3, #0
 80018b2:	4605      	mov	r5, r0
 80018b4:	4608      	mov	r0, r1
 80018b6:	6023      	str	r3, [r4, #0]
 80018b8:	f7ff fed0 	bl	800165c <_close>
 80018bc:	1c43      	adds	r3, r0, #1
 80018be:	d102      	bne.n	80018c6 <_close_r+0x1a>
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	b103      	cbz	r3, 80018c6 <_close_r+0x1a>
 80018c4:	602b      	str	r3, [r5, #0]
 80018c6:	bd38      	pop	{r3, r4, r5, pc}
 80018c8:	200000e0 	.word	0x200000e0

080018cc <_cleanup_r>:
 80018cc:	4901      	ldr	r1, [pc, #4]	; (80018d4 <_cleanup_r+0x8>)
 80018ce:	f000 b8a9 	b.w	8001a24 <_fwalk_reent>
 80018d2:	bf00      	nop
 80018d4:	080023c1 	.word	0x080023c1

080018d8 <std.isra.0>:
 80018d8:	2300      	movs	r3, #0
 80018da:	b510      	push	{r4, lr}
 80018dc:	4604      	mov	r4, r0
 80018de:	6003      	str	r3, [r0, #0]
 80018e0:	6043      	str	r3, [r0, #4]
 80018e2:	6083      	str	r3, [r0, #8]
 80018e4:	8181      	strh	r1, [r0, #12]
 80018e6:	6643      	str	r3, [r0, #100]	; 0x64
 80018e8:	81c2      	strh	r2, [r0, #14]
 80018ea:	6103      	str	r3, [r0, #16]
 80018ec:	6143      	str	r3, [r0, #20]
 80018ee:	6183      	str	r3, [r0, #24]
 80018f0:	4619      	mov	r1, r3
 80018f2:	2208      	movs	r2, #8
 80018f4:	305c      	adds	r0, #92	; 0x5c
 80018f6:	f7ff ff63 	bl	80017c0 <memset>
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <std.isra.0+0x38>)
 80018fc:	6263      	str	r3, [r4, #36]	; 0x24
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <std.isra.0+0x3c>)
 8001900:	62a3      	str	r3, [r4, #40]	; 0x28
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <std.isra.0+0x40>)
 8001904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <std.isra.0+0x44>)
 8001908:	6224      	str	r4, [r4, #32]
 800190a:	6323      	str	r3, [r4, #48]	; 0x30
 800190c:	bd10      	pop	{r4, pc}
 800190e:	bf00      	nop
 8001910:	08001801 	.word	0x08001801
 8001914:	08001823 	.word	0x08001823
 8001918:	0800185b 	.word	0x0800185b
 800191c:	0800187f 	.word	0x0800187f

08001920 <__sfmoreglue>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	1e4a      	subs	r2, r1, #1
 8001924:	2568      	movs	r5, #104	; 0x68
 8001926:	4355      	muls	r5, r2
 8001928:	460e      	mov	r6, r1
 800192a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800192e:	f000 f8a9 	bl	8001a84 <_malloc_r>
 8001932:	4604      	mov	r4, r0
 8001934:	b140      	cbz	r0, 8001948 <__sfmoreglue+0x28>
 8001936:	2100      	movs	r1, #0
 8001938:	e880 0042 	stmia.w	r0, {r1, r6}
 800193c:	300c      	adds	r0, #12
 800193e:	60a0      	str	r0, [r4, #8]
 8001940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001944:	f7ff ff3c 	bl	80017c0 <memset>
 8001948:	4620      	mov	r0, r4
 800194a:	bd70      	pop	{r4, r5, r6, pc}

0800194c <__sinit>:
 800194c:	6983      	ldr	r3, [r0, #24]
 800194e:	b510      	push	{r4, lr}
 8001950:	4604      	mov	r4, r0
 8001952:	bb33      	cbnz	r3, 80019a2 <__sinit+0x56>
 8001954:	6483      	str	r3, [r0, #72]	; 0x48
 8001956:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001958:	6503      	str	r3, [r0, #80]	; 0x50
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <__sinit+0x58>)
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <__sinit+0x5c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6282      	str	r2, [r0, #40]	; 0x28
 8001962:	4298      	cmp	r0, r3
 8001964:	bf04      	itt	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	6183      	streq	r3, [r0, #24]
 800196a:	f000 f81f 	bl	80019ac <__sfp>
 800196e:	6060      	str	r0, [r4, #4]
 8001970:	4620      	mov	r0, r4
 8001972:	f000 f81b 	bl	80019ac <__sfp>
 8001976:	60a0      	str	r0, [r4, #8]
 8001978:	4620      	mov	r0, r4
 800197a:	f000 f817 	bl	80019ac <__sfp>
 800197e:	2200      	movs	r2, #0
 8001980:	60e0      	str	r0, [r4, #12]
 8001982:	2104      	movs	r1, #4
 8001984:	6860      	ldr	r0, [r4, #4]
 8001986:	f7ff ffa7 	bl	80018d8 <std.isra.0>
 800198a:	2201      	movs	r2, #1
 800198c:	2109      	movs	r1, #9
 800198e:	68a0      	ldr	r0, [r4, #8]
 8001990:	f7ff ffa2 	bl	80018d8 <std.isra.0>
 8001994:	2202      	movs	r2, #2
 8001996:	2112      	movs	r1, #18
 8001998:	68e0      	ldr	r0, [r4, #12]
 800199a:	f7ff ff9d 	bl	80018d8 <std.isra.0>
 800199e:	2301      	movs	r3, #1
 80019a0:	61a3      	str	r3, [r4, #24]
 80019a2:	bd10      	pop	{r4, pc}
 80019a4:	08002600 	.word	0x08002600
 80019a8:	080018cd 	.word	0x080018cd

080019ac <__sfp>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <__sfp+0x74>)
 80019b0:	681e      	ldr	r6, [r3, #0]
 80019b2:	69b3      	ldr	r3, [r6, #24]
 80019b4:	4607      	mov	r7, r0
 80019b6:	b913      	cbnz	r3, 80019be <__sfp+0x12>
 80019b8:	4630      	mov	r0, r6
 80019ba:	f7ff ffc7 	bl	800194c <__sinit>
 80019be:	3648      	adds	r6, #72	; 0x48
 80019c0:	68b4      	ldr	r4, [r6, #8]
 80019c2:	6873      	ldr	r3, [r6, #4]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	d503      	bpl.n	80019d0 <__sfp+0x24>
 80019c8:	6833      	ldr	r3, [r6, #0]
 80019ca:	b133      	cbz	r3, 80019da <__sfp+0x2e>
 80019cc:	6836      	ldr	r6, [r6, #0]
 80019ce:	e7f7      	b.n	80019c0 <__sfp+0x14>
 80019d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019d4:	b16d      	cbz	r5, 80019f2 <__sfp+0x46>
 80019d6:	3468      	adds	r4, #104	; 0x68
 80019d8:	e7f4      	b.n	80019c4 <__sfp+0x18>
 80019da:	2104      	movs	r1, #4
 80019dc:	4638      	mov	r0, r7
 80019de:	f7ff ff9f 	bl	8001920 <__sfmoreglue>
 80019e2:	6030      	str	r0, [r6, #0]
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d1f1      	bne.n	80019cc <__sfp+0x20>
 80019e8:	230c      	movs	r3, #12
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	4604      	mov	r4, r0
 80019ee:	4620      	mov	r0, r4
 80019f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f6:	81e3      	strh	r3, [r4, #14]
 80019f8:	2301      	movs	r3, #1
 80019fa:	81a3      	strh	r3, [r4, #12]
 80019fc:	6665      	str	r5, [r4, #100]	; 0x64
 80019fe:	6025      	str	r5, [r4, #0]
 8001a00:	60a5      	str	r5, [r4, #8]
 8001a02:	6065      	str	r5, [r4, #4]
 8001a04:	6125      	str	r5, [r4, #16]
 8001a06:	6165      	str	r5, [r4, #20]
 8001a08:	61a5      	str	r5, [r4, #24]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a12:	f7ff fed5 	bl	80017c0 <memset>
 8001a16:	6365      	str	r5, [r4, #52]	; 0x34
 8001a18:	63a5      	str	r5, [r4, #56]	; 0x38
 8001a1a:	64a5      	str	r5, [r4, #72]	; 0x48
 8001a1c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001a1e:	e7e6      	b.n	80019ee <__sfp+0x42>
 8001a20:	08002600 	.word	0x08002600

08001a24 <_fwalk_reent>:
 8001a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a28:	4680      	mov	r8, r0
 8001a2a:	4689      	mov	r9, r1
 8001a2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a30:	2600      	movs	r6, #0
 8001a32:	b914      	cbnz	r4, 8001a3a <_fwalk_reent+0x16>
 8001a34:	4630      	mov	r0, r6
 8001a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a3a:	68a5      	ldr	r5, [r4, #8]
 8001a3c:	6867      	ldr	r7, [r4, #4]
 8001a3e:	3f01      	subs	r7, #1
 8001a40:	d501      	bpl.n	8001a46 <_fwalk_reent+0x22>
 8001a42:	6824      	ldr	r4, [r4, #0]
 8001a44:	e7f5      	b.n	8001a32 <_fwalk_reent+0xe>
 8001a46:	89ab      	ldrh	r3, [r5, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d907      	bls.n	8001a5c <_fwalk_reent+0x38>
 8001a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a50:	3301      	adds	r3, #1
 8001a52:	d003      	beq.n	8001a5c <_fwalk_reent+0x38>
 8001a54:	4629      	mov	r1, r5
 8001a56:	4640      	mov	r0, r8
 8001a58:	47c8      	blx	r9
 8001a5a:	4306      	orrs	r6, r0
 8001a5c:	3568      	adds	r5, #104	; 0x68
 8001a5e:	e7ee      	b.n	8001a3e <_fwalk_reent+0x1a>

08001a60 <_lseek_r>:
 8001a60:	b538      	push	{r3, r4, r5, lr}
 8001a62:	4c07      	ldr	r4, [pc, #28]	; (8001a80 <_lseek_r+0x20>)
 8001a64:	4605      	mov	r5, r0
 8001a66:	4608      	mov	r0, r1
 8001a68:	4611      	mov	r1, r2
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	6022      	str	r2, [r4, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f7ff fdfe 	bl	8001670 <_lseek>
 8001a74:	1c43      	adds	r3, r0, #1
 8001a76:	d102      	bne.n	8001a7e <_lseek_r+0x1e>
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	b103      	cbz	r3, 8001a7e <_lseek_r+0x1e>
 8001a7c:	602b      	str	r3, [r5, #0]
 8001a7e:	bd38      	pop	{r3, r4, r5, pc}
 8001a80:	200000e0 	.word	0x200000e0

08001a84 <_malloc_r>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	1ccd      	adds	r5, r1, #3
 8001a88:	f025 0503 	bic.w	r5, r5, #3
 8001a8c:	3508      	adds	r5, #8
 8001a8e:	2d0c      	cmp	r5, #12
 8001a90:	bf38      	it	cc
 8001a92:	250c      	movcc	r5, #12
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	4606      	mov	r6, r0
 8001a98:	db01      	blt.n	8001a9e <_malloc_r+0x1a>
 8001a9a:	42a9      	cmp	r1, r5
 8001a9c:	d903      	bls.n	8001aa6 <_malloc_r+0x22>
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	6033      	str	r3, [r6, #0]
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
 8001aa6:	f000 fd19 	bl	80024dc <__malloc_lock>
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <_malloc_r+0xb4>)
 8001aac:	6814      	ldr	r4, [r2, #0]
 8001aae:	4621      	mov	r1, r4
 8001ab0:	b991      	cbnz	r1, 8001ad8 <_malloc_r+0x54>
 8001ab2:	4c22      	ldr	r4, [pc, #136]	; (8001b3c <_malloc_r+0xb8>)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	b91b      	cbnz	r3, 8001ac0 <_malloc_r+0x3c>
 8001ab8:	4630      	mov	r0, r6
 8001aba:	f000 fb29 	bl	8002110 <_sbrk_r>
 8001abe:	6020      	str	r0, [r4, #0]
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	f000 fb24 	bl	8002110 <_sbrk_r>
 8001ac8:	1c43      	adds	r3, r0, #1
 8001aca:	d126      	bne.n	8001b1a <_malloc_r+0x96>
 8001acc:	230c      	movs	r3, #12
 8001ace:	6033      	str	r3, [r6, #0]
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f000 fd04 	bl	80024de <__malloc_unlock>
 8001ad6:	e7e4      	b.n	8001aa2 <_malloc_r+0x1e>
 8001ad8:	680b      	ldr	r3, [r1, #0]
 8001ada:	1b5b      	subs	r3, r3, r5
 8001adc:	d41a      	bmi.n	8001b14 <_malloc_r+0x90>
 8001ade:	2b0b      	cmp	r3, #11
 8001ae0:	d90f      	bls.n	8001b02 <_malloc_r+0x7e>
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	50cd      	str	r5, [r1, r3]
 8001ae6:	18cc      	adds	r4, r1, r3
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f000 fcf8 	bl	80024de <__malloc_unlock>
 8001aee:	f104 000b 	add.w	r0, r4, #11
 8001af2:	1d23      	adds	r3, r4, #4
 8001af4:	f020 0007 	bic.w	r0, r0, #7
 8001af8:	1ac3      	subs	r3, r0, r3
 8001afa:	d01b      	beq.n	8001b34 <_malloc_r+0xb0>
 8001afc:	425a      	negs	r2, r3
 8001afe:	50e2      	str	r2, [r4, r3]
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
 8001b02:	428c      	cmp	r4, r1
 8001b04:	bf0d      	iteet	eq
 8001b06:	6863      	ldreq	r3, [r4, #4]
 8001b08:	684b      	ldrne	r3, [r1, #4]
 8001b0a:	6063      	strne	r3, [r4, #4]
 8001b0c:	6013      	streq	r3, [r2, #0]
 8001b0e:	bf18      	it	ne
 8001b10:	460c      	movne	r4, r1
 8001b12:	e7e9      	b.n	8001ae8 <_malloc_r+0x64>
 8001b14:	460c      	mov	r4, r1
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	e7ca      	b.n	8001ab0 <_malloc_r+0x2c>
 8001b1a:	1cc4      	adds	r4, r0, #3
 8001b1c:	f024 0403 	bic.w	r4, r4, #3
 8001b20:	42a0      	cmp	r0, r4
 8001b22:	d005      	beq.n	8001b30 <_malloc_r+0xac>
 8001b24:	1a21      	subs	r1, r4, r0
 8001b26:	4630      	mov	r0, r6
 8001b28:	f000 faf2 	bl	8002110 <_sbrk_r>
 8001b2c:	3001      	adds	r0, #1
 8001b2e:	d0cd      	beq.n	8001acc <_malloc_r+0x48>
 8001b30:	6025      	str	r5, [r4, #0]
 8001b32:	e7d9      	b.n	8001ae8 <_malloc_r+0x64>
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
 8001b36:	bf00      	nop
 8001b38:	20000094 	.word	0x20000094
 8001b3c:	20000098 	.word	0x20000098

08001b40 <__sfputc_r>:
 8001b40:	6893      	ldr	r3, [r2, #8]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	b410      	push	{r4}
 8001b48:	6093      	str	r3, [r2, #8]
 8001b4a:	da09      	bge.n	8001b60 <__sfputc_r+0x20>
 8001b4c:	6994      	ldr	r4, [r2, #24]
 8001b4e:	42a3      	cmp	r3, r4
 8001b50:	db02      	blt.n	8001b58 <__sfputc_r+0x18>
 8001b52:	b2cb      	uxtb	r3, r1
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	d103      	bne.n	8001b60 <__sfputc_r+0x20>
 8001b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b5c:	f000 bae8 	b.w	8002130 <__swbuf_r>
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	1c58      	adds	r0, r3, #1
 8001b64:	6010      	str	r0, [r2, #0]
 8001b66:	7019      	strb	r1, [r3, #0]
 8001b68:	b2c8      	uxtb	r0, r1
 8001b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <__sfputs_r>:
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	4606      	mov	r6, r0
 8001b74:	460f      	mov	r7, r1
 8001b76:	4614      	mov	r4, r2
 8001b78:	18d5      	adds	r5, r2, r3
 8001b7a:	42ac      	cmp	r4, r5
 8001b7c:	d101      	bne.n	8001b82 <__sfputs_r+0x12>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e007      	b.n	8001b92 <__sfputs_r+0x22>
 8001b82:	463a      	mov	r2, r7
 8001b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f7ff ffd9 	bl	8001b40 <__sfputc_r>
 8001b8e:	1c43      	adds	r3, r0, #1
 8001b90:	d1f3      	bne.n	8001b7a <__sfputs_r+0xa>
 8001b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b94 <_vfiprintf_r>:
 8001b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b98:	b09d      	sub	sp, #116	; 0x74
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	4617      	mov	r7, r2
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	4606      	mov	r6, r0
 8001ba2:	b118      	cbz	r0, 8001bac <_vfiprintf_r+0x18>
 8001ba4:	6983      	ldr	r3, [r0, #24]
 8001ba6:	b90b      	cbnz	r3, 8001bac <_vfiprintf_r+0x18>
 8001ba8:	f7ff fed0 	bl	800194c <__sinit>
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <_vfiprintf_r+0x20c>)
 8001bae:	429c      	cmp	r4, r3
 8001bb0:	d157      	bne.n	8001c62 <_vfiprintf_r+0xce>
 8001bb2:	6874      	ldr	r4, [r6, #4]
 8001bb4:	89a3      	ldrh	r3, [r4, #12]
 8001bb6:	0718      	lsls	r0, r3, #28
 8001bb8:	d55d      	bpl.n	8001c76 <_vfiprintf_r+0xe2>
 8001bba:	6923      	ldr	r3, [r4, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05a      	beq.n	8001c76 <_vfiprintf_r+0xe2>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bca:	2330      	movs	r3, #48	; 0x30
 8001bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bd0:	f04f 0b01 	mov.w	fp, #1
 8001bd4:	46b8      	mov	r8, r7
 8001bd6:	4645      	mov	r5, r8
 8001bd8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d155      	bne.n	8001c8c <_vfiprintf_r+0xf8>
 8001be0:	ebb8 0a07 	subs.w	sl, r8, r7
 8001be4:	d00b      	beq.n	8001bfe <_vfiprintf_r+0x6a>
 8001be6:	4653      	mov	r3, sl
 8001be8:	463a      	mov	r2, r7
 8001bea:	4621      	mov	r1, r4
 8001bec:	4630      	mov	r0, r6
 8001bee:	f7ff ffbf 	bl	8001b70 <__sfputs_r>
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	f000 80c4 	beq.w	8001d80 <_vfiprintf_r+0x1ec>
 8001bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bfa:	4453      	add	r3, sl
 8001bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8001bfe:	f898 3000 	ldrb.w	r3, [r8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80bc 	beq.w	8001d80 <_vfiprintf_r+0x1ec>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0e:	9304      	str	r3, [sp, #16]
 8001c10:	9307      	str	r3, [sp, #28]
 8001c12:	9205      	str	r2, [sp, #20]
 8001c14:	9306      	str	r3, [sp, #24]
 8001c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	7829      	ldrb	r1, [r5, #0]
 8001c20:	4860      	ldr	r0, [pc, #384]	; (8001da4 <_vfiprintf_r+0x210>)
 8001c22:	f7fe fad5 	bl	80001d0 <memchr>
 8001c26:	f105 0801 	add.w	r8, r5, #1
 8001c2a:	9b04      	ldr	r3, [sp, #16]
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d131      	bne.n	8001c94 <_vfiprintf_r+0x100>
 8001c30:	06d9      	lsls	r1, r3, #27
 8001c32:	bf44      	itt	mi
 8001c34:	2220      	movmi	r2, #32
 8001c36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c3a:	071a      	lsls	r2, r3, #28
 8001c3c:	bf44      	itt	mi
 8001c3e:	222b      	movmi	r2, #43	; 0x2b
 8001c40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c44:	782a      	ldrb	r2, [r5, #0]
 8001c46:	2a2a      	cmp	r2, #42	; 0x2a
 8001c48:	d02c      	beq.n	8001ca4 <_vfiprintf_r+0x110>
 8001c4a:	9a07      	ldr	r2, [sp, #28]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	200a      	movs	r0, #10
 8001c50:	46a8      	mov	r8, r5
 8001c52:	3501      	adds	r5, #1
 8001c54:	f898 3000 	ldrb.w	r3, [r8]
 8001c58:	3b30      	subs	r3, #48	; 0x30
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	d96d      	bls.n	8001d3a <_vfiprintf_r+0x1a6>
 8001c5e:	b371      	cbz	r1, 8001cbe <_vfiprintf_r+0x12a>
 8001c60:	e026      	b.n	8001cb0 <_vfiprintf_r+0x11c>
 8001c62:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <_vfiprintf_r+0x214>)
 8001c64:	429c      	cmp	r4, r3
 8001c66:	d101      	bne.n	8001c6c <_vfiprintf_r+0xd8>
 8001c68:	68b4      	ldr	r4, [r6, #8]
 8001c6a:	e7a3      	b.n	8001bb4 <_vfiprintf_r+0x20>
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <_vfiprintf_r+0x218>)
 8001c6e:	429c      	cmp	r4, r3
 8001c70:	bf08      	it	eq
 8001c72:	68f4      	ldreq	r4, [r6, #12]
 8001c74:	e79e      	b.n	8001bb4 <_vfiprintf_r+0x20>
 8001c76:	4621      	mov	r1, r4
 8001c78:	4630      	mov	r0, r6
 8001c7a:	f000 faab 	bl	80021d4 <__swsetup_r>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d09e      	beq.n	8001bc0 <_vfiprintf_r+0x2c>
 8001c82:	f04f 30ff 	mov.w	r0, #4294967295
 8001c86:	b01d      	add	sp, #116	; 0x74
 8001c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c8c:	2b25      	cmp	r3, #37	; 0x25
 8001c8e:	d0a7      	beq.n	8001be0 <_vfiprintf_r+0x4c>
 8001c90:	46a8      	mov	r8, r5
 8001c92:	e7a0      	b.n	8001bd6 <_vfiprintf_r+0x42>
 8001c94:	4a43      	ldr	r2, [pc, #268]	; (8001da4 <_vfiprintf_r+0x210>)
 8001c96:	1a80      	subs	r0, r0, r2
 8001c98:	fa0b f000 	lsl.w	r0, fp, r0
 8001c9c:	4318      	orrs	r0, r3
 8001c9e:	9004      	str	r0, [sp, #16]
 8001ca0:	4645      	mov	r5, r8
 8001ca2:	e7bb      	b.n	8001c1c <_vfiprintf_r+0x88>
 8001ca4:	9a03      	ldr	r2, [sp, #12]
 8001ca6:	1d11      	adds	r1, r2, #4
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	9103      	str	r1, [sp, #12]
 8001cac:	2a00      	cmp	r2, #0
 8001cae:	db01      	blt.n	8001cb4 <_vfiprintf_r+0x120>
 8001cb0:	9207      	str	r2, [sp, #28]
 8001cb2:	e004      	b.n	8001cbe <_vfiprintf_r+0x12a>
 8001cb4:	4252      	negs	r2, r2
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	9207      	str	r2, [sp, #28]
 8001cbc:	9304      	str	r3, [sp, #16]
 8001cbe:	f898 3000 	ldrb.w	r3, [r8]
 8001cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8001cc4:	d110      	bne.n	8001ce8 <_vfiprintf_r+0x154>
 8001cc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001cca:	2b2a      	cmp	r3, #42	; 0x2a
 8001ccc:	f108 0101 	add.w	r1, r8, #1
 8001cd0:	d137      	bne.n	8001d42 <_vfiprintf_r+0x1ae>
 8001cd2:	9b03      	ldr	r3, [sp, #12]
 8001cd4:	1d1a      	adds	r2, r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	9203      	str	r2, [sp, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bfb8      	it	lt
 8001cde:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ce2:	f108 0802 	add.w	r8, r8, #2
 8001ce6:	9305      	str	r3, [sp, #20]
 8001ce8:	4d31      	ldr	r5, [pc, #196]	; (8001db0 <_vfiprintf_r+0x21c>)
 8001cea:	f898 1000 	ldrb.w	r1, [r8]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f7fe fa6d 	bl	80001d0 <memchr>
 8001cf6:	b140      	cbz	r0, 8001d0a <_vfiprintf_r+0x176>
 8001cf8:	2340      	movs	r3, #64	; 0x40
 8001cfa:	1b40      	subs	r0, r0, r5
 8001cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8001d00:	9b04      	ldr	r3, [sp, #16]
 8001d02:	4303      	orrs	r3, r0
 8001d04:	9304      	str	r3, [sp, #16]
 8001d06:	f108 0801 	add.w	r8, r8, #1
 8001d0a:	f898 1000 	ldrb.w	r1, [r8]
 8001d0e:	4829      	ldr	r0, [pc, #164]	; (8001db4 <_vfiprintf_r+0x220>)
 8001d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d14:	2206      	movs	r2, #6
 8001d16:	f108 0701 	add.w	r7, r8, #1
 8001d1a:	f7fe fa59 	bl	80001d0 <memchr>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d034      	beq.n	8001d8c <_vfiprintf_r+0x1f8>
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <_vfiprintf_r+0x224>)
 8001d24:	bb03      	cbnz	r3, 8001d68 <_vfiprintf_r+0x1d4>
 8001d26:	9b03      	ldr	r3, [sp, #12]
 8001d28:	3307      	adds	r3, #7
 8001d2a:	f023 0307 	bic.w	r3, r3, #7
 8001d2e:	3308      	adds	r3, #8
 8001d30:	9303      	str	r3, [sp, #12]
 8001d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d34:	444b      	add	r3, r9
 8001d36:	9309      	str	r3, [sp, #36]	; 0x24
 8001d38:	e74c      	b.n	8001bd4 <_vfiprintf_r+0x40>
 8001d3a:	fb00 3202 	mla	r2, r0, r2, r3
 8001d3e:	2101      	movs	r1, #1
 8001d40:	e786      	b.n	8001c50 <_vfiprintf_r+0xbc>
 8001d42:	2300      	movs	r3, #0
 8001d44:	9305      	str	r3, [sp, #20]
 8001d46:	4618      	mov	r0, r3
 8001d48:	250a      	movs	r5, #10
 8001d4a:	4688      	mov	r8, r1
 8001d4c:	3101      	adds	r1, #1
 8001d4e:	f898 2000 	ldrb.w	r2, [r8]
 8001d52:	3a30      	subs	r2, #48	; 0x30
 8001d54:	2a09      	cmp	r2, #9
 8001d56:	d903      	bls.n	8001d60 <_vfiprintf_r+0x1cc>
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0c5      	beq.n	8001ce8 <_vfiprintf_r+0x154>
 8001d5c:	9005      	str	r0, [sp, #20]
 8001d5e:	e7c3      	b.n	8001ce8 <_vfiprintf_r+0x154>
 8001d60:	fb05 2000 	mla	r0, r5, r0, r2
 8001d64:	2301      	movs	r3, #1
 8001d66:	e7f0      	b.n	8001d4a <_vfiprintf_r+0x1b6>
 8001d68:	ab03      	add	r3, sp, #12
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_vfiprintf_r+0x228>)
 8001d70:	a904      	add	r1, sp, #16
 8001d72:	4630      	mov	r0, r6
 8001d74:	f3af 8000 	nop.w
 8001d78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d7c:	4681      	mov	r9, r0
 8001d7e:	d1d8      	bne.n	8001d32 <_vfiprintf_r+0x19e>
 8001d80:	89a3      	ldrh	r3, [r4, #12]
 8001d82:	065b      	lsls	r3, r3, #25
 8001d84:	f53f af7d 	bmi.w	8001c82 <_vfiprintf_r+0xee>
 8001d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d8a:	e77c      	b.n	8001c86 <_vfiprintf_r+0xf2>
 8001d8c:	ab03      	add	r3, sp, #12
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4622      	mov	r2, r4
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <_vfiprintf_r+0x228>)
 8001d94:	a904      	add	r1, sp, #16
 8001d96:	4630      	mov	r0, r6
 8001d98:	f000 f888 	bl	8001eac <_printf_i>
 8001d9c:	e7ec      	b.n	8001d78 <_vfiprintf_r+0x1e4>
 8001d9e:	bf00      	nop
 8001da0:	08002624 	.word	0x08002624
 8001da4:	08002664 	.word	0x08002664
 8001da8:	08002644 	.word	0x08002644
 8001dac:	08002604 	.word	0x08002604
 8001db0:	0800266a 	.word	0x0800266a
 8001db4:	0800266e 	.word	0x0800266e
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	08001b71 	.word	0x08001b71

08001dc0 <_printf_common>:
 8001dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dc4:	4691      	mov	r9, r2
 8001dc6:	461f      	mov	r7, r3
 8001dc8:	688a      	ldr	r2, [r1, #8]
 8001dca:	690b      	ldr	r3, [r1, #16]
 8001dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	bfb8      	it	lt
 8001dd4:	4613      	movlt	r3, r2
 8001dd6:	f8c9 3000 	str.w	r3, [r9]
 8001dda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001dde:	4606      	mov	r6, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	b112      	cbz	r2, 8001dea <_printf_common+0x2a>
 8001de4:	3301      	adds	r3, #1
 8001de6:	f8c9 3000 	str.w	r3, [r9]
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	0699      	lsls	r1, r3, #26
 8001dee:	bf42      	ittt	mi
 8001df0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001df4:	3302      	addmi	r3, #2
 8001df6:	f8c9 3000 	strmi.w	r3, [r9]
 8001dfa:	6825      	ldr	r5, [r4, #0]
 8001dfc:	f015 0506 	ands.w	r5, r5, #6
 8001e00:	d107      	bne.n	8001e12 <_printf_common+0x52>
 8001e02:	f104 0a19 	add.w	sl, r4, #25
 8001e06:	68e3      	ldr	r3, [r4, #12]
 8001e08:	f8d9 2000 	ldr.w	r2, [r9]
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	429d      	cmp	r5, r3
 8001e10:	db29      	blt.n	8001e66 <_printf_common+0xa6>
 8001e12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	3300      	adds	r3, #0
 8001e1a:	bf18      	it	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	0692      	lsls	r2, r2, #26
 8001e20:	d42e      	bmi.n	8001e80 <_printf_common+0xc0>
 8001e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e26:	4639      	mov	r1, r7
 8001e28:	4630      	mov	r0, r6
 8001e2a:	47c0      	blx	r8
 8001e2c:	3001      	adds	r0, #1
 8001e2e:	d021      	beq.n	8001e74 <_printf_common+0xb4>
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	68e5      	ldr	r5, [r4, #12]
 8001e34:	f8d9 2000 	ldr.w	r2, [r9]
 8001e38:	f003 0306 	and.w	r3, r3, #6
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	bf08      	it	eq
 8001e40:	1aad      	subeq	r5, r5, r2
 8001e42:	68a3      	ldr	r3, [r4, #8]
 8001e44:	6922      	ldr	r2, [r4, #16]
 8001e46:	bf0c      	ite	eq
 8001e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e4c:	2500      	movne	r5, #0
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	bfc4      	itt	gt
 8001e52:	1a9b      	subgt	r3, r3, r2
 8001e54:	18ed      	addgt	r5, r5, r3
 8001e56:	f04f 0900 	mov.w	r9, #0
 8001e5a:	341a      	adds	r4, #26
 8001e5c:	454d      	cmp	r5, r9
 8001e5e:	d11b      	bne.n	8001e98 <_printf_common+0xd8>
 8001e60:	2000      	movs	r0, #0
 8001e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e66:	2301      	movs	r3, #1
 8001e68:	4652      	mov	r2, sl
 8001e6a:	4639      	mov	r1, r7
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	47c0      	blx	r8
 8001e70:	3001      	adds	r0, #1
 8001e72:	d103      	bne.n	8001e7c <_printf_common+0xbc>
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e7c:	3501      	adds	r5, #1
 8001e7e:	e7c2      	b.n	8001e06 <_printf_common+0x46>
 8001e80:	18e1      	adds	r1, r4, r3
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	2030      	movs	r0, #48	; 0x30
 8001e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e8a:	4422      	add	r2, r4
 8001e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e94:	3302      	adds	r3, #2
 8001e96:	e7c4      	b.n	8001e22 <_printf_common+0x62>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	4639      	mov	r1, r7
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	47c0      	blx	r8
 8001ea2:	3001      	adds	r0, #1
 8001ea4:	d0e6      	beq.n	8001e74 <_printf_common+0xb4>
 8001ea6:	f109 0901 	add.w	r9, r9, #1
 8001eaa:	e7d7      	b.n	8001e5c <_printf_common+0x9c>

08001eac <_printf_i>:
 8001eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eb0:	4617      	mov	r7, r2
 8001eb2:	7e0a      	ldrb	r2, [r1, #24]
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	2a6e      	cmp	r2, #110	; 0x6e
 8001eb8:	4698      	mov	r8, r3
 8001eba:	4606      	mov	r6, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ec0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001ec4:	f000 80bc 	beq.w	8002040 <_printf_i+0x194>
 8001ec8:	d81a      	bhi.n	8001f00 <_printf_i+0x54>
 8001eca:	2a63      	cmp	r2, #99	; 0x63
 8001ecc:	d02e      	beq.n	8001f2c <_printf_i+0x80>
 8001ece:	d80a      	bhi.n	8001ee6 <_printf_i+0x3a>
 8001ed0:	2a00      	cmp	r2, #0
 8001ed2:	f000 80c8 	beq.w	8002066 <_printf_i+0x1ba>
 8001ed6:	2a58      	cmp	r2, #88	; 0x58
 8001ed8:	f000 808a 	beq.w	8001ff0 <_printf_i+0x144>
 8001edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ee0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001ee4:	e02a      	b.n	8001f3c <_printf_i+0x90>
 8001ee6:	2a64      	cmp	r2, #100	; 0x64
 8001ee8:	d001      	beq.n	8001eee <_printf_i+0x42>
 8001eea:	2a69      	cmp	r2, #105	; 0x69
 8001eec:	d1f6      	bne.n	8001edc <_printf_i+0x30>
 8001eee:	6821      	ldr	r1, [r4, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ef6:	d023      	beq.n	8001f40 <_printf_i+0x94>
 8001ef8:	1d11      	adds	r1, r2, #4
 8001efa:	6019      	str	r1, [r3, #0]
 8001efc:	6813      	ldr	r3, [r2, #0]
 8001efe:	e027      	b.n	8001f50 <_printf_i+0xa4>
 8001f00:	2a73      	cmp	r2, #115	; 0x73
 8001f02:	f000 80b4 	beq.w	800206e <_printf_i+0x1c2>
 8001f06:	d808      	bhi.n	8001f1a <_printf_i+0x6e>
 8001f08:	2a6f      	cmp	r2, #111	; 0x6f
 8001f0a:	d02a      	beq.n	8001f62 <_printf_i+0xb6>
 8001f0c:	2a70      	cmp	r2, #112	; 0x70
 8001f0e:	d1e5      	bne.n	8001edc <_printf_i+0x30>
 8001f10:	680a      	ldr	r2, [r1, #0]
 8001f12:	f042 0220 	orr.w	r2, r2, #32
 8001f16:	600a      	str	r2, [r1, #0]
 8001f18:	e003      	b.n	8001f22 <_printf_i+0x76>
 8001f1a:	2a75      	cmp	r2, #117	; 0x75
 8001f1c:	d021      	beq.n	8001f62 <_printf_i+0xb6>
 8001f1e:	2a78      	cmp	r2, #120	; 0x78
 8001f20:	d1dc      	bne.n	8001edc <_printf_i+0x30>
 8001f22:	2278      	movs	r2, #120	; 0x78
 8001f24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001f28:	496e      	ldr	r1, [pc, #440]	; (80020e4 <_printf_i+0x238>)
 8001f2a:	e064      	b.n	8001ff6 <_printf_i+0x14a>
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001f32:	1d11      	adds	r1, r2, #4
 8001f34:	6019      	str	r1, [r3, #0]
 8001f36:	6813      	ldr	r3, [r2, #0]
 8001f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0a3      	b.n	8002088 <_printf_i+0x1dc>
 8001f40:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001f44:	f102 0104 	add.w	r1, r2, #4
 8001f48:	6019      	str	r1, [r3, #0]
 8001f4a:	d0d7      	beq.n	8001efc <_printf_i+0x50>
 8001f4c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	da03      	bge.n	8001f5c <_printf_i+0xb0>
 8001f54:	222d      	movs	r2, #45	; 0x2d
 8001f56:	425b      	negs	r3, r3
 8001f58:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f5c:	4962      	ldr	r1, [pc, #392]	; (80020e8 <_printf_i+0x23c>)
 8001f5e:	220a      	movs	r2, #10
 8001f60:	e017      	b.n	8001f92 <_printf_i+0xe6>
 8001f62:	6820      	ldr	r0, [r4, #0]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f6a:	d003      	beq.n	8001f74 <_printf_i+0xc8>
 8001f6c:	1d08      	adds	r0, r1, #4
 8001f6e:	6018      	str	r0, [r3, #0]
 8001f70:	680b      	ldr	r3, [r1, #0]
 8001f72:	e006      	b.n	8001f82 <_printf_i+0xd6>
 8001f74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f78:	f101 0004 	add.w	r0, r1, #4
 8001f7c:	6018      	str	r0, [r3, #0]
 8001f7e:	d0f7      	beq.n	8001f70 <_printf_i+0xc4>
 8001f80:	880b      	ldrh	r3, [r1, #0]
 8001f82:	4959      	ldr	r1, [pc, #356]	; (80020e8 <_printf_i+0x23c>)
 8001f84:	2a6f      	cmp	r2, #111	; 0x6f
 8001f86:	bf14      	ite	ne
 8001f88:	220a      	movne	r2, #10
 8001f8a:	2208      	moveq	r2, #8
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001f92:	6865      	ldr	r5, [r4, #4]
 8001f94:	60a5      	str	r5, [r4, #8]
 8001f96:	2d00      	cmp	r5, #0
 8001f98:	f2c0 809c 	blt.w	80020d4 <_printf_i+0x228>
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	f020 0004 	bic.w	r0, r0, #4
 8001fa2:	6020      	str	r0, [r4, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d13f      	bne.n	8002028 <_printf_i+0x17c>
 8001fa8:	2d00      	cmp	r5, #0
 8001faa:	f040 8095 	bne.w	80020d8 <_printf_i+0x22c>
 8001fae:	4675      	mov	r5, lr
 8001fb0:	2a08      	cmp	r2, #8
 8001fb2:	d10b      	bne.n	8001fcc <_printf_i+0x120>
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	07da      	lsls	r2, r3, #31
 8001fb8:	d508      	bpl.n	8001fcc <_printf_i+0x120>
 8001fba:	6923      	ldr	r3, [r4, #16]
 8001fbc:	6862      	ldr	r2, [r4, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	bfde      	ittt	le
 8001fc2:	2330      	movle	r3, #48	; 0x30
 8001fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001fcc:	ebae 0305 	sub.w	r3, lr, r5
 8001fd0:	6123      	str	r3, [r4, #16]
 8001fd2:	f8cd 8000 	str.w	r8, [sp]
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	aa03      	add	r2, sp, #12
 8001fda:	4621      	mov	r1, r4
 8001fdc:	4630      	mov	r0, r6
 8001fde:	f7ff feef 	bl	8001dc0 <_printf_common>
 8001fe2:	3001      	adds	r0, #1
 8001fe4:	d155      	bne.n	8002092 <_printf_i+0x1e6>
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fea:	b005      	add	sp, #20
 8001fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ff0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001ff4:	493c      	ldr	r1, [pc, #240]	; (80020e8 <_printf_i+0x23c>)
 8001ff6:	6822      	ldr	r2, [r4, #0]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ffe:	f100 0504 	add.w	r5, r0, #4
 8002002:	601d      	str	r5, [r3, #0]
 8002004:	d001      	beq.n	800200a <_printf_i+0x15e>
 8002006:	6803      	ldr	r3, [r0, #0]
 8002008:	e002      	b.n	8002010 <_printf_i+0x164>
 800200a:	0655      	lsls	r5, r2, #25
 800200c:	d5fb      	bpl.n	8002006 <_printf_i+0x15a>
 800200e:	8803      	ldrh	r3, [r0, #0]
 8002010:	07d0      	lsls	r0, r2, #31
 8002012:	bf44      	itt	mi
 8002014:	f042 0220 	orrmi.w	r2, r2, #32
 8002018:	6022      	strmi	r2, [r4, #0]
 800201a:	b91b      	cbnz	r3, 8002024 <_printf_i+0x178>
 800201c:	6822      	ldr	r2, [r4, #0]
 800201e:	f022 0220 	bic.w	r2, r2, #32
 8002022:	6022      	str	r2, [r4, #0]
 8002024:	2210      	movs	r2, #16
 8002026:	e7b1      	b.n	8001f8c <_printf_i+0xe0>
 8002028:	4675      	mov	r5, lr
 800202a:	fbb3 f0f2 	udiv	r0, r3, r2
 800202e:	fb02 3310 	mls	r3, r2, r0, r3
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002038:	4603      	mov	r3, r0
 800203a:	2800      	cmp	r0, #0
 800203c:	d1f5      	bne.n	800202a <_printf_i+0x17e>
 800203e:	e7b7      	b.n	8001fb0 <_printf_i+0x104>
 8002040:	6808      	ldr	r0, [r1, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	6949      	ldr	r1, [r1, #20]
 8002046:	f010 0f80 	tst.w	r0, #128	; 0x80
 800204a:	d004      	beq.n	8002056 <_printf_i+0x1aa>
 800204c:	1d10      	adds	r0, r2, #4
 800204e:	6018      	str	r0, [r3, #0]
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	6019      	str	r1, [r3, #0]
 8002054:	e007      	b.n	8002066 <_printf_i+0x1ba>
 8002056:	f010 0f40 	tst.w	r0, #64	; 0x40
 800205a:	f102 0004 	add.w	r0, r2, #4
 800205e:	6018      	str	r0, [r3, #0]
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	d0f6      	beq.n	8002052 <_printf_i+0x1a6>
 8002064:	8019      	strh	r1, [r3, #0]
 8002066:	2300      	movs	r3, #0
 8002068:	6123      	str	r3, [r4, #16]
 800206a:	4675      	mov	r5, lr
 800206c:	e7b1      	b.n	8001fd2 <_printf_i+0x126>
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	1d11      	adds	r1, r2, #4
 8002072:	6019      	str	r1, [r3, #0]
 8002074:	6815      	ldr	r5, [r2, #0]
 8002076:	6862      	ldr	r2, [r4, #4]
 8002078:	2100      	movs	r1, #0
 800207a:	4628      	mov	r0, r5
 800207c:	f7fe f8a8 	bl	80001d0 <memchr>
 8002080:	b108      	cbz	r0, 8002086 <_printf_i+0x1da>
 8002082:	1b40      	subs	r0, r0, r5
 8002084:	6060      	str	r0, [r4, #4]
 8002086:	6863      	ldr	r3, [r4, #4]
 8002088:	6123      	str	r3, [r4, #16]
 800208a:	2300      	movs	r3, #0
 800208c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002090:	e79f      	b.n	8001fd2 <_printf_i+0x126>
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	462a      	mov	r2, r5
 8002096:	4639      	mov	r1, r7
 8002098:	4630      	mov	r0, r6
 800209a:	47c0      	blx	r8
 800209c:	3001      	adds	r0, #1
 800209e:	d0a2      	beq.n	8001fe6 <_printf_i+0x13a>
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	079b      	lsls	r3, r3, #30
 80020a4:	d507      	bpl.n	80020b6 <_printf_i+0x20a>
 80020a6:	2500      	movs	r5, #0
 80020a8:	f104 0919 	add.w	r9, r4, #25
 80020ac:	68e3      	ldr	r3, [r4, #12]
 80020ae:	9a03      	ldr	r2, [sp, #12]
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	429d      	cmp	r5, r3
 80020b4:	db05      	blt.n	80020c2 <_printf_i+0x216>
 80020b6:	68e0      	ldr	r0, [r4, #12]
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	4298      	cmp	r0, r3
 80020bc:	bfb8      	it	lt
 80020be:	4618      	movlt	r0, r3
 80020c0:	e793      	b.n	8001fea <_printf_i+0x13e>
 80020c2:	2301      	movs	r3, #1
 80020c4:	464a      	mov	r2, r9
 80020c6:	4639      	mov	r1, r7
 80020c8:	4630      	mov	r0, r6
 80020ca:	47c0      	blx	r8
 80020cc:	3001      	adds	r0, #1
 80020ce:	d08a      	beq.n	8001fe6 <_printf_i+0x13a>
 80020d0:	3501      	adds	r5, #1
 80020d2:	e7eb      	b.n	80020ac <_printf_i+0x200>
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1a7      	bne.n	8002028 <_printf_i+0x17c>
 80020d8:	780b      	ldrb	r3, [r1, #0]
 80020da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020e2:	e765      	b.n	8001fb0 <_printf_i+0x104>
 80020e4:	08002686 	.word	0x08002686
 80020e8:	08002675 	.word	0x08002675

080020ec <_read_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4c07      	ldr	r4, [pc, #28]	; (800210c <_read_r+0x20>)
 80020f0:	4605      	mov	r5, r0
 80020f2:	4608      	mov	r0, r1
 80020f4:	4611      	mov	r1, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	6022      	str	r2, [r4, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f7ff fa86 	bl	800160c <_read>
 8002100:	1c43      	adds	r3, r0, #1
 8002102:	d102      	bne.n	800210a <_read_r+0x1e>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	b103      	cbz	r3, 800210a <_read_r+0x1e>
 8002108:	602b      	str	r3, [r5, #0]
 800210a:	bd38      	pop	{r3, r4, r5, pc}
 800210c:	200000e0 	.word	0x200000e0

08002110 <_sbrk_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4c06      	ldr	r4, [pc, #24]	; (800212c <_sbrk_r+0x1c>)
 8002114:	2300      	movs	r3, #0
 8002116:	4605      	mov	r5, r0
 8002118:	4608      	mov	r0, r1
 800211a:	6023      	str	r3, [r4, #0]
 800211c:	f7ff fa84 	bl	8001628 <_sbrk>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d102      	bne.n	800212a <_sbrk_r+0x1a>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	b103      	cbz	r3, 800212a <_sbrk_r+0x1a>
 8002128:	602b      	str	r3, [r5, #0]
 800212a:	bd38      	pop	{r3, r4, r5, pc}
 800212c:	200000e0 	.word	0x200000e0

08002130 <__swbuf_r>:
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002132:	460e      	mov	r6, r1
 8002134:	4614      	mov	r4, r2
 8002136:	4605      	mov	r5, r0
 8002138:	b118      	cbz	r0, 8002142 <__swbuf_r+0x12>
 800213a:	6983      	ldr	r3, [r0, #24]
 800213c:	b90b      	cbnz	r3, 8002142 <__swbuf_r+0x12>
 800213e:	f7ff fc05 	bl	800194c <__sinit>
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <__swbuf_r+0x98>)
 8002144:	429c      	cmp	r4, r3
 8002146:	d12a      	bne.n	800219e <__swbuf_r+0x6e>
 8002148:	686c      	ldr	r4, [r5, #4]
 800214a:	69a3      	ldr	r3, [r4, #24]
 800214c:	60a3      	str	r3, [r4, #8]
 800214e:	89a3      	ldrh	r3, [r4, #12]
 8002150:	071a      	lsls	r2, r3, #28
 8002152:	d52e      	bpl.n	80021b2 <__swbuf_r+0x82>
 8002154:	6923      	ldr	r3, [r4, #16]
 8002156:	b363      	cbz	r3, 80021b2 <__swbuf_r+0x82>
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	6820      	ldr	r0, [r4, #0]
 800215c:	1ac0      	subs	r0, r0, r3
 800215e:	6963      	ldr	r3, [r4, #20]
 8002160:	b2f6      	uxtb	r6, r6
 8002162:	4298      	cmp	r0, r3
 8002164:	4637      	mov	r7, r6
 8002166:	db04      	blt.n	8002172 <__swbuf_r+0x42>
 8002168:	4621      	mov	r1, r4
 800216a:	4628      	mov	r0, r5
 800216c:	f000 f928 	bl	80023c0 <_fflush_r>
 8002170:	bb28      	cbnz	r0, 80021be <__swbuf_r+0x8e>
 8002172:	68a3      	ldr	r3, [r4, #8]
 8002174:	3b01      	subs	r3, #1
 8002176:	60a3      	str	r3, [r4, #8]
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	6022      	str	r2, [r4, #0]
 800217e:	701e      	strb	r6, [r3, #0]
 8002180:	6963      	ldr	r3, [r4, #20]
 8002182:	3001      	adds	r0, #1
 8002184:	4298      	cmp	r0, r3
 8002186:	d004      	beq.n	8002192 <__swbuf_r+0x62>
 8002188:	89a3      	ldrh	r3, [r4, #12]
 800218a:	07db      	lsls	r3, r3, #31
 800218c:	d519      	bpl.n	80021c2 <__swbuf_r+0x92>
 800218e:	2e0a      	cmp	r6, #10
 8002190:	d117      	bne.n	80021c2 <__swbuf_r+0x92>
 8002192:	4621      	mov	r1, r4
 8002194:	4628      	mov	r0, r5
 8002196:	f000 f913 	bl	80023c0 <_fflush_r>
 800219a:	b190      	cbz	r0, 80021c2 <__swbuf_r+0x92>
 800219c:	e00f      	b.n	80021be <__swbuf_r+0x8e>
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <__swbuf_r+0x9c>)
 80021a0:	429c      	cmp	r4, r3
 80021a2:	d101      	bne.n	80021a8 <__swbuf_r+0x78>
 80021a4:	68ac      	ldr	r4, [r5, #8]
 80021a6:	e7d0      	b.n	800214a <__swbuf_r+0x1a>
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <__swbuf_r+0xa0>)
 80021aa:	429c      	cmp	r4, r3
 80021ac:	bf08      	it	eq
 80021ae:	68ec      	ldreq	r4, [r5, #12]
 80021b0:	e7cb      	b.n	800214a <__swbuf_r+0x1a>
 80021b2:	4621      	mov	r1, r4
 80021b4:	4628      	mov	r0, r5
 80021b6:	f000 f80d 	bl	80021d4 <__swsetup_r>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d0cc      	beq.n	8002158 <__swbuf_r+0x28>
 80021be:	f04f 37ff 	mov.w	r7, #4294967295
 80021c2:	4638      	mov	r0, r7
 80021c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	08002624 	.word	0x08002624
 80021cc:	08002644 	.word	0x08002644
 80021d0:	08002604 	.word	0x08002604

080021d4 <__swsetup_r>:
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <__swsetup_r+0xcc>)
 80021d6:	b570      	push	{r4, r5, r6, lr}
 80021d8:	681d      	ldr	r5, [r3, #0]
 80021da:	4606      	mov	r6, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	b125      	cbz	r5, 80021ea <__swsetup_r+0x16>
 80021e0:	69ab      	ldr	r3, [r5, #24]
 80021e2:	b913      	cbnz	r3, 80021ea <__swsetup_r+0x16>
 80021e4:	4628      	mov	r0, r5
 80021e6:	f7ff fbb1 	bl	800194c <__sinit>
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <__swsetup_r+0xd0>)
 80021ec:	429c      	cmp	r4, r3
 80021ee:	d10f      	bne.n	8002210 <__swsetup_r+0x3c>
 80021f0:	686c      	ldr	r4, [r5, #4]
 80021f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	0715      	lsls	r5, r2, #28
 80021fa:	d42c      	bmi.n	8002256 <__swsetup_r+0x82>
 80021fc:	06d0      	lsls	r0, r2, #27
 80021fe:	d411      	bmi.n	8002224 <__swsetup_r+0x50>
 8002200:	2209      	movs	r2, #9
 8002202:	6032      	str	r2, [r6, #0]
 8002204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002208:	81a3      	strh	r3, [r4, #12]
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
 800220e:	bd70      	pop	{r4, r5, r6, pc}
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <__swsetup_r+0xd4>)
 8002212:	429c      	cmp	r4, r3
 8002214:	d101      	bne.n	800221a <__swsetup_r+0x46>
 8002216:	68ac      	ldr	r4, [r5, #8]
 8002218:	e7eb      	b.n	80021f2 <__swsetup_r+0x1e>
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <__swsetup_r+0xd8>)
 800221c:	429c      	cmp	r4, r3
 800221e:	bf08      	it	eq
 8002220:	68ec      	ldreq	r4, [r5, #12]
 8002222:	e7e6      	b.n	80021f2 <__swsetup_r+0x1e>
 8002224:	0751      	lsls	r1, r2, #29
 8002226:	d512      	bpl.n	800224e <__swsetup_r+0x7a>
 8002228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800222a:	b141      	cbz	r1, 800223e <__swsetup_r+0x6a>
 800222c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002230:	4299      	cmp	r1, r3
 8002232:	d002      	beq.n	800223a <__swsetup_r+0x66>
 8002234:	4630      	mov	r0, r6
 8002236:	f000 f953 	bl	80024e0 <_free_r>
 800223a:	2300      	movs	r3, #0
 800223c:	6363      	str	r3, [r4, #52]	; 0x34
 800223e:	89a3      	ldrh	r3, [r4, #12]
 8002240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002244:	81a3      	strh	r3, [r4, #12]
 8002246:	2300      	movs	r3, #0
 8002248:	6063      	str	r3, [r4, #4]
 800224a:	6923      	ldr	r3, [r4, #16]
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	89a3      	ldrh	r3, [r4, #12]
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	81a3      	strh	r3, [r4, #12]
 8002256:	6923      	ldr	r3, [r4, #16]
 8002258:	b94b      	cbnz	r3, 800226e <__swsetup_r+0x9a>
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002264:	d003      	beq.n	800226e <__swsetup_r+0x9a>
 8002266:	4621      	mov	r1, r4
 8002268:	4630      	mov	r0, r6
 800226a:	f000 f8f7 	bl	800245c <__smakebuf_r>
 800226e:	89a2      	ldrh	r2, [r4, #12]
 8002270:	f012 0301 	ands.w	r3, r2, #1
 8002274:	d00c      	beq.n	8002290 <__swsetup_r+0xbc>
 8002276:	2300      	movs	r3, #0
 8002278:	60a3      	str	r3, [r4, #8]
 800227a:	6963      	ldr	r3, [r4, #20]
 800227c:	425b      	negs	r3, r3
 800227e:	61a3      	str	r3, [r4, #24]
 8002280:	6923      	ldr	r3, [r4, #16]
 8002282:	b953      	cbnz	r3, 800229a <__swsetup_r+0xc6>
 8002284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002288:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800228c:	d1ba      	bne.n	8002204 <__swsetup_r+0x30>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	0792      	lsls	r2, r2, #30
 8002292:	bf58      	it	pl
 8002294:	6963      	ldrpl	r3, [r4, #20]
 8002296:	60a3      	str	r3, [r4, #8]
 8002298:	e7f2      	b.n	8002280 <__swsetup_r+0xac>
 800229a:	2000      	movs	r0, #0
 800229c:	e7f7      	b.n	800228e <__swsetup_r+0xba>
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	08002624 	.word	0x08002624
 80022a8:	08002644 	.word	0x08002644
 80022ac:	08002604 	.word	0x08002604

080022b0 <__sflush_r>:
 80022b0:	898a      	ldrh	r2, [r1, #12]
 80022b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b6:	4605      	mov	r5, r0
 80022b8:	0710      	lsls	r0, r2, #28
 80022ba:	460c      	mov	r4, r1
 80022bc:	d45a      	bmi.n	8002374 <__sflush_r+0xc4>
 80022be:	684b      	ldr	r3, [r1, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dc05      	bgt.n	80022d0 <__sflush_r+0x20>
 80022c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	dc02      	bgt.n	80022d0 <__sflush_r+0x20>
 80022ca:	2000      	movs	r0, #0
 80022cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022d2:	2e00      	cmp	r6, #0
 80022d4:	d0f9      	beq.n	80022ca <__sflush_r+0x1a>
 80022d6:	2300      	movs	r3, #0
 80022d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022dc:	682f      	ldr	r7, [r5, #0]
 80022de:	602b      	str	r3, [r5, #0]
 80022e0:	d033      	beq.n	800234a <__sflush_r+0x9a>
 80022e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	075a      	lsls	r2, r3, #29
 80022e8:	d505      	bpl.n	80022f6 <__sflush_r+0x46>
 80022ea:	6863      	ldr	r3, [r4, #4]
 80022ec:	1ac0      	subs	r0, r0, r3
 80022ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022f0:	b10b      	cbz	r3, 80022f6 <__sflush_r+0x46>
 80022f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022f4:	1ac0      	subs	r0, r0, r3
 80022f6:	2300      	movs	r3, #0
 80022f8:	4602      	mov	r2, r0
 80022fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022fc:	6a21      	ldr	r1, [r4, #32]
 80022fe:	4628      	mov	r0, r5
 8002300:	47b0      	blx	r6
 8002302:	1c43      	adds	r3, r0, #1
 8002304:	89a3      	ldrh	r3, [r4, #12]
 8002306:	d106      	bne.n	8002316 <__sflush_r+0x66>
 8002308:	6829      	ldr	r1, [r5, #0]
 800230a:	291d      	cmp	r1, #29
 800230c:	d84b      	bhi.n	80023a6 <__sflush_r+0xf6>
 800230e:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <__sflush_r+0x10c>)
 8002310:	40ca      	lsrs	r2, r1
 8002312:	07d6      	lsls	r6, r2, #31
 8002314:	d547      	bpl.n	80023a6 <__sflush_r+0xf6>
 8002316:	2200      	movs	r2, #0
 8002318:	6062      	str	r2, [r4, #4]
 800231a:	04d9      	lsls	r1, r3, #19
 800231c:	6922      	ldr	r2, [r4, #16]
 800231e:	6022      	str	r2, [r4, #0]
 8002320:	d504      	bpl.n	800232c <__sflush_r+0x7c>
 8002322:	1c42      	adds	r2, r0, #1
 8002324:	d101      	bne.n	800232a <__sflush_r+0x7a>
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	b903      	cbnz	r3, 800232c <__sflush_r+0x7c>
 800232a:	6560      	str	r0, [r4, #84]	; 0x54
 800232c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800232e:	602f      	str	r7, [r5, #0]
 8002330:	2900      	cmp	r1, #0
 8002332:	d0ca      	beq.n	80022ca <__sflush_r+0x1a>
 8002334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002338:	4299      	cmp	r1, r3
 800233a:	d002      	beq.n	8002342 <__sflush_r+0x92>
 800233c:	4628      	mov	r0, r5
 800233e:	f000 f8cf 	bl	80024e0 <_free_r>
 8002342:	2000      	movs	r0, #0
 8002344:	6360      	str	r0, [r4, #52]	; 0x34
 8002346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800234a:	6a21      	ldr	r1, [r4, #32]
 800234c:	2301      	movs	r3, #1
 800234e:	4628      	mov	r0, r5
 8002350:	47b0      	blx	r6
 8002352:	1c41      	adds	r1, r0, #1
 8002354:	d1c6      	bne.n	80022e4 <__sflush_r+0x34>
 8002356:	682b      	ldr	r3, [r5, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0c3      	beq.n	80022e4 <__sflush_r+0x34>
 800235c:	2b1d      	cmp	r3, #29
 800235e:	d001      	beq.n	8002364 <__sflush_r+0xb4>
 8002360:	2b16      	cmp	r3, #22
 8002362:	d101      	bne.n	8002368 <__sflush_r+0xb8>
 8002364:	602f      	str	r7, [r5, #0]
 8002366:	e7b0      	b.n	80022ca <__sflush_r+0x1a>
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236e:	81a3      	strh	r3, [r4, #12]
 8002370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002374:	690f      	ldr	r7, [r1, #16]
 8002376:	2f00      	cmp	r7, #0
 8002378:	d0a7      	beq.n	80022ca <__sflush_r+0x1a>
 800237a:	0793      	lsls	r3, r2, #30
 800237c:	680e      	ldr	r6, [r1, #0]
 800237e:	bf08      	it	eq
 8002380:	694b      	ldreq	r3, [r1, #20]
 8002382:	600f      	str	r7, [r1, #0]
 8002384:	bf18      	it	ne
 8002386:	2300      	movne	r3, #0
 8002388:	eba6 0807 	sub.w	r8, r6, r7
 800238c:	608b      	str	r3, [r1, #8]
 800238e:	f1b8 0f00 	cmp.w	r8, #0
 8002392:	dd9a      	ble.n	80022ca <__sflush_r+0x1a>
 8002394:	4643      	mov	r3, r8
 8002396:	463a      	mov	r2, r7
 8002398:	6a21      	ldr	r1, [r4, #32]
 800239a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800239c:	4628      	mov	r0, r5
 800239e:	47b0      	blx	r6
 80023a0:	2800      	cmp	r0, #0
 80023a2:	dc07      	bgt.n	80023b4 <__sflush_r+0x104>
 80023a4:	89a3      	ldrh	r3, [r4, #12]
 80023a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023aa:	81a3      	strh	r3, [r4, #12]
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023b4:	4407      	add	r7, r0
 80023b6:	eba8 0800 	sub.w	r8, r8, r0
 80023ba:	e7e8      	b.n	800238e <__sflush_r+0xde>
 80023bc:	20400001 	.word	0x20400001

080023c0 <_fflush_r>:
 80023c0:	b538      	push	{r3, r4, r5, lr}
 80023c2:	690b      	ldr	r3, [r1, #16]
 80023c4:	4605      	mov	r5, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	b1db      	cbz	r3, 8002402 <_fflush_r+0x42>
 80023ca:	b118      	cbz	r0, 80023d4 <_fflush_r+0x14>
 80023cc:	6983      	ldr	r3, [r0, #24]
 80023ce:	b90b      	cbnz	r3, 80023d4 <_fflush_r+0x14>
 80023d0:	f7ff fabc 	bl	800194c <__sinit>
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <_fflush_r+0x48>)
 80023d6:	429c      	cmp	r4, r3
 80023d8:	d109      	bne.n	80023ee <_fflush_r+0x2e>
 80023da:	686c      	ldr	r4, [r5, #4]
 80023dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e0:	b17b      	cbz	r3, 8002402 <_fflush_r+0x42>
 80023e2:	4621      	mov	r1, r4
 80023e4:	4628      	mov	r0, r5
 80023e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023ea:	f7ff bf61 	b.w	80022b0 <__sflush_r>
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_fflush_r+0x4c>)
 80023f0:	429c      	cmp	r4, r3
 80023f2:	d101      	bne.n	80023f8 <_fflush_r+0x38>
 80023f4:	68ac      	ldr	r4, [r5, #8]
 80023f6:	e7f1      	b.n	80023dc <_fflush_r+0x1c>
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <_fflush_r+0x50>)
 80023fa:	429c      	cmp	r4, r3
 80023fc:	bf08      	it	eq
 80023fe:	68ec      	ldreq	r4, [r5, #12]
 8002400:	e7ec      	b.n	80023dc <_fflush_r+0x1c>
 8002402:	2000      	movs	r0, #0
 8002404:	bd38      	pop	{r3, r4, r5, pc}
 8002406:	bf00      	nop
 8002408:	08002624 	.word	0x08002624
 800240c:	08002644 	.word	0x08002644
 8002410:	08002604 	.word	0x08002604

08002414 <__swhatbuf_r>:
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	460e      	mov	r6, r1
 8002418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800241c:	2900      	cmp	r1, #0
 800241e:	b090      	sub	sp, #64	; 0x40
 8002420:	4614      	mov	r4, r2
 8002422:	461d      	mov	r5, r3
 8002424:	da07      	bge.n	8002436 <__swhatbuf_r+0x22>
 8002426:	2300      	movs	r3, #0
 8002428:	602b      	str	r3, [r5, #0]
 800242a:	89b3      	ldrh	r3, [r6, #12]
 800242c:	061a      	lsls	r2, r3, #24
 800242e:	d410      	bmi.n	8002452 <__swhatbuf_r+0x3e>
 8002430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002434:	e00e      	b.n	8002454 <__swhatbuf_r+0x40>
 8002436:	aa01      	add	r2, sp, #4
 8002438:	f000 f8a0 	bl	800257c <_fstat_r>
 800243c:	2800      	cmp	r0, #0
 800243e:	dbf2      	blt.n	8002426 <__swhatbuf_r+0x12>
 8002440:	9a02      	ldr	r2, [sp, #8]
 8002442:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002446:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800244a:	425a      	negs	r2, r3
 800244c:	415a      	adcs	r2, r3
 800244e:	602a      	str	r2, [r5, #0]
 8002450:	e7ee      	b.n	8002430 <__swhatbuf_r+0x1c>
 8002452:	2340      	movs	r3, #64	; 0x40
 8002454:	2000      	movs	r0, #0
 8002456:	6023      	str	r3, [r4, #0]
 8002458:	b010      	add	sp, #64	; 0x40
 800245a:	bd70      	pop	{r4, r5, r6, pc}

0800245c <__smakebuf_r>:
 800245c:	898b      	ldrh	r3, [r1, #12]
 800245e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002460:	079d      	lsls	r5, r3, #30
 8002462:	4606      	mov	r6, r0
 8002464:	460c      	mov	r4, r1
 8002466:	d507      	bpl.n	8002478 <__smakebuf_r+0x1c>
 8002468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800246c:	6023      	str	r3, [r4, #0]
 800246e:	6123      	str	r3, [r4, #16]
 8002470:	2301      	movs	r3, #1
 8002472:	6163      	str	r3, [r4, #20]
 8002474:	b002      	add	sp, #8
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	ab01      	add	r3, sp, #4
 800247a:	466a      	mov	r2, sp
 800247c:	f7ff ffca 	bl	8002414 <__swhatbuf_r>
 8002480:	9900      	ldr	r1, [sp, #0]
 8002482:	4605      	mov	r5, r0
 8002484:	4630      	mov	r0, r6
 8002486:	f7ff fafd 	bl	8001a84 <_malloc_r>
 800248a:	b948      	cbnz	r0, 80024a0 <__smakebuf_r+0x44>
 800248c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002490:	059a      	lsls	r2, r3, #22
 8002492:	d4ef      	bmi.n	8002474 <__smakebuf_r+0x18>
 8002494:	f023 0303 	bic.w	r3, r3, #3
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	81a3      	strh	r3, [r4, #12]
 800249e:	e7e3      	b.n	8002468 <__smakebuf_r+0xc>
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <__smakebuf_r+0x7c>)
 80024a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	6020      	str	r0, [r4, #0]
 80024a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ac:	81a3      	strh	r3, [r4, #12]
 80024ae:	9b00      	ldr	r3, [sp, #0]
 80024b0:	6163      	str	r3, [r4, #20]
 80024b2:	9b01      	ldr	r3, [sp, #4]
 80024b4:	6120      	str	r0, [r4, #16]
 80024b6:	b15b      	cbz	r3, 80024d0 <__smakebuf_r+0x74>
 80024b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024bc:	4630      	mov	r0, r6
 80024be:	f000 f86f 	bl	80025a0 <_isatty_r>
 80024c2:	b128      	cbz	r0, 80024d0 <__smakebuf_r+0x74>
 80024c4:	89a3      	ldrh	r3, [r4, #12]
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	81a3      	strh	r3, [r4, #12]
 80024d0:	89a3      	ldrh	r3, [r4, #12]
 80024d2:	431d      	orrs	r5, r3
 80024d4:	81a5      	strh	r5, [r4, #12]
 80024d6:	e7cd      	b.n	8002474 <__smakebuf_r+0x18>
 80024d8:	080018cd 	.word	0x080018cd

080024dc <__malloc_lock>:
 80024dc:	4770      	bx	lr

080024de <__malloc_unlock>:
 80024de:	4770      	bx	lr

080024e0 <_free_r>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4605      	mov	r5, r0
 80024e4:	2900      	cmp	r1, #0
 80024e6:	d045      	beq.n	8002574 <_free_r+0x94>
 80024e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024ec:	1f0c      	subs	r4, r1, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bfb8      	it	lt
 80024f2:	18e4      	addlt	r4, r4, r3
 80024f4:	f7ff fff2 	bl	80024dc <__malloc_lock>
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <_free_r+0x98>)
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	4610      	mov	r0, r2
 80024fe:	b933      	cbnz	r3, 800250e <_free_r+0x2e>
 8002500:	6063      	str	r3, [r4, #4]
 8002502:	6014      	str	r4, [r2, #0]
 8002504:	4628      	mov	r0, r5
 8002506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800250a:	f7ff bfe8 	b.w	80024de <__malloc_unlock>
 800250e:	42a3      	cmp	r3, r4
 8002510:	d90c      	bls.n	800252c <_free_r+0x4c>
 8002512:	6821      	ldr	r1, [r4, #0]
 8002514:	1862      	adds	r2, r4, r1
 8002516:	4293      	cmp	r3, r2
 8002518:	bf04      	itt	eq
 800251a:	681a      	ldreq	r2, [r3, #0]
 800251c:	685b      	ldreq	r3, [r3, #4]
 800251e:	6063      	str	r3, [r4, #4]
 8002520:	bf04      	itt	eq
 8002522:	1852      	addeq	r2, r2, r1
 8002524:	6022      	streq	r2, [r4, #0]
 8002526:	6004      	str	r4, [r0, #0]
 8002528:	e7ec      	b.n	8002504 <_free_r+0x24>
 800252a:	4613      	mov	r3, r2
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	b10a      	cbz	r2, 8002534 <_free_r+0x54>
 8002530:	42a2      	cmp	r2, r4
 8002532:	d9fa      	bls.n	800252a <_free_r+0x4a>
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	1858      	adds	r0, r3, r1
 8002538:	42a0      	cmp	r0, r4
 800253a:	d10b      	bne.n	8002554 <_free_r+0x74>
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	4401      	add	r1, r0
 8002540:	1858      	adds	r0, r3, r1
 8002542:	4282      	cmp	r2, r0
 8002544:	6019      	str	r1, [r3, #0]
 8002546:	d1dd      	bne.n	8002504 <_free_r+0x24>
 8002548:	6810      	ldr	r0, [r2, #0]
 800254a:	6852      	ldr	r2, [r2, #4]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	4401      	add	r1, r0
 8002550:	6019      	str	r1, [r3, #0]
 8002552:	e7d7      	b.n	8002504 <_free_r+0x24>
 8002554:	d902      	bls.n	800255c <_free_r+0x7c>
 8002556:	230c      	movs	r3, #12
 8002558:	602b      	str	r3, [r5, #0]
 800255a:	e7d3      	b.n	8002504 <_free_r+0x24>
 800255c:	6820      	ldr	r0, [r4, #0]
 800255e:	1821      	adds	r1, r4, r0
 8002560:	428a      	cmp	r2, r1
 8002562:	bf04      	itt	eq
 8002564:	6811      	ldreq	r1, [r2, #0]
 8002566:	6852      	ldreq	r2, [r2, #4]
 8002568:	6062      	str	r2, [r4, #4]
 800256a:	bf04      	itt	eq
 800256c:	1809      	addeq	r1, r1, r0
 800256e:	6021      	streq	r1, [r4, #0]
 8002570:	605c      	str	r4, [r3, #4]
 8002572:	e7c7      	b.n	8002504 <_free_r+0x24>
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	bf00      	nop
 8002578:	20000094 	.word	0x20000094

0800257c <_fstat_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4c07      	ldr	r4, [pc, #28]	; (800259c <_fstat_r+0x20>)
 8002580:	2300      	movs	r3, #0
 8002582:	4605      	mov	r5, r0
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	6023      	str	r3, [r4, #0]
 800258a:	f7ff f86a 	bl	8001662 <_fstat>
 800258e:	1c43      	adds	r3, r0, #1
 8002590:	d102      	bne.n	8002598 <_fstat_r+0x1c>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	b103      	cbz	r3, 8002598 <_fstat_r+0x1c>
 8002596:	602b      	str	r3, [r5, #0]
 8002598:	bd38      	pop	{r3, r4, r5, pc}
 800259a:	bf00      	nop
 800259c:	200000e0 	.word	0x200000e0

080025a0 <_isatty_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4c06      	ldr	r4, [pc, #24]	; (80025bc <_isatty_r+0x1c>)
 80025a4:	2300      	movs	r3, #0
 80025a6:	4605      	mov	r5, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	6023      	str	r3, [r4, #0]
 80025ac:	f7ff f85e 	bl	800166c <_isatty>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d102      	bne.n	80025ba <_isatty_r+0x1a>
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	b103      	cbz	r3, 80025ba <_isatty_r+0x1a>
 80025b8:	602b      	str	r3, [r5, #0]
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
 80025bc:	200000e0 	.word	0x200000e0

080025c0 <_init>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	bf00      	nop
 80025c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c6:	bc08      	pop	{r3}
 80025c8:	469e      	mov	lr, r3
 80025ca:	4770      	bx	lr

080025cc <_fini>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	bf00      	nop
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr
